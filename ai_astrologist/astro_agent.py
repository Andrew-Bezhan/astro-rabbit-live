# test edit from Cursor_1
"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å AI-–∞—Å—Ç—Ä–æ–ª–æ–≥–∞ AstroRabbit
"""

import openai
from typing import Dict, Any, Optional, List
from datetime import datetime

from .prompts import (
    ASTRO_RABBIT_SYSTEM_PROMPT,
    COMPANY_ZODIAC_PROMPT,
    BUSINESS_FORECAST_PROMPT,
    COMPATIBILITY_PROMPT,
    DAILY_FORECAST_PROMPT,
    DETAILED_ANALYSIS_PROMPTS
)
from .numerology import NumerologyCalculator
from astrology_api.astro_calculations import AstroCalculations
from utils.config import load_config
from utils.helpers import get_zodiac_sign
from utils.logger import setup_logger

logger = setup_logger()


class AstroAgent:
    """AI-–∞–≥–µ–Ω—Ç –∞—Å—Ç—Ä–æ–ª–æ–≥ AstroRabbit"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞"""
        self.config = load_config()
        
        try:
            from .gemini_client import GeminiAstroClient
            self.gemini_client = GeminiAstroClient()
            self.numerology = NumerologyCalculator()
            self.astro_calculations = AstroCalculations()
            logger.info("‚úÖ AstroRabbit –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å Gemini –∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ —Ä–∞—Å—á–µ—Ç–∞–º–∏")
        except Exception as e:
            logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: AI-–∞—Å—Ç—Ä–æ–ª–æ–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (Gemini API): {e}")
            # –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–ú –ó–ê–ì–õ–£–®–ö–ò - –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            raise Exception(f"Gemini –∫–ª–∏–µ–Ω—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {e}")
    
    async def analyze_company_zodiac(self, company_info: Dict[str, Any], 
                                   news_data: str = "") -> str:
        """
        –ê–Ω–∞–ª–∏–∑ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏
        
        Args:
            company_info (Dict): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏
            news_data (str): –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
            
        Returns:
            str: –ê–Ω–∞–ª–∏–∑ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –∫–æ–º–ø–∞–Ω–∏–∏
            registration_date = company_info.get('registration_date')
            if isinstance(registration_date, str):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
                formats = ['%Y-%m-%d', '%d.%m.%Y', '%d/%m/%Y', '%Y-%m-%dT%H:%M:%S']
                date_obj = None
                for fmt in formats:
                    try:
                        date_obj = datetime.strptime(registration_date, fmt)
                        break
                    except ValueError:
                        continue
                
                if date_obj is None:
                    try:
                        date_obj = datetime.fromisoformat(registration_date)
                    except ValueError:
                        # –§–æ–ª–ª–±—ç–∫ –¥–∞—Ç–∞ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
                        date_obj = datetime(2020, 1, 1)
                        
                registration_date = date_obj
            
            # –°–æ–∑–¥–∞–µ–º –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã
            natal_chart = {}
            if self.astro_calculations and registration_date:
                natal_chart = await self.astro_calculations.get_company_natal_chart(
                    company_info.get('name', ''),
                    registration_date,
                    company_info.get('registration_place', '')
                )
        
            zodiac_sign = get_zodiac_sign(registration_date) if registration_date else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
            astro_info = ""
            if natal_chart:
                basic_info = natal_chart.get('basic_info', {})
                interpretation = natal_chart.get('interpretation', {})
                
                astro_info = f"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
‚Ä¢ –≠–ª–µ–º–µ–Ω—Ç: {basic_info.get('element', '')}
‚Ä¢ –£–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {basic_info.get('ruler', '')}
‚Ä¢ –ë–∏–∑–Ω–µ—Å-—Å—Ç–∏–ª—å: {interpretation.get('business_style', '')}
‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã: {interpretation.get('financial_outlook', '')}
‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞: {interpretation.get('growth_potential', '')}
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Å—Ñ–µ—Ä—ã: {', '.join(basic_info.get('best_spheres', []))}
                """
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
            prompt = COMPANY_ZODIAC_PROMPT.format(
                company_name=company_info.get('name', ''),
                registration_date=registration_date.strftime('%d.%m.%Y') if registration_date else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                registration_place=company_info.get('registration_place', ''),
                zodiac_sign=zodiac_sign,
                news_data=news_data[:2000]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
            ) + astro_info
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini
            if not self.gemini_client:
                raise Exception("Gemini –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            chart_data = {
                "company_name": company_info.get('name', ''),
                "zodiac_sign": zodiac_sign,
                "registration_info": astro_info,
                "news_context": news_data[:2000]
            }
            
            result = self.gemini_client.generate_astro_analysis(chart_data, "business")
            logger.info(f"‚ú® –ê–Ω–∞–ª–∏–∑ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ –¥–ª—è {company_info.get('name')} –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ Gemini")
            
            return result or "üîÆ –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–æ–ª—É—á–µ–Ω—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã –¥–ª—è –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏."
            
        except Exception as e:
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–ú –ó–ê–ì–õ–£–®–ö–ò
            logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –∞–Ω–∞–ª–∏–∑–∞ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞: {e}")
            raise Exception(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞: {e}")
    
    async def generate_business_forecast(self, company_data: Dict[str, Any],
                                       astrology_data: str = "",
                                       news_data: str = "") -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑–∞
        
        Args:
            company_data (Dict): –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏
            astrology_data (str): –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            news_data (str): –ù–æ–≤–æ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            
        Returns:
            str: –ü–æ–ª–Ω—ã–π –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑
        """
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—ã –∏ –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞–∫–∏ –∑–æ–¥–∏–∞–∫–∞
            company_zodiac = self._get_zodiac_safe(company_data.get('registration_date'))
            owner_zodiac = self._get_zodiac_safe(company_data.get('owner_birth_date'))
            director_zodiac = self._get_zodiac_safe(company_data.get('director_birth_date'))
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —á–∏—Å–ª–∞
            owner_numerology = 0
            director_numerology = 0
            
            if company_data.get('owner_name'):
                owner_numerology = self.numerology.calculate_name_number(
                    company_data['owner_name']
                )
            
            if company_data.get('director_name'):
                director_numerology = self.numerology.calculate_name_number(
                    company_data['director_name']
                )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
            prompt = BUSINESS_FORECAST_PROMPT.format(
                company_name=company_data.get('name', ''),
                registration_date=self._format_date_safe(company_data.get('registration_date')),
                registration_place=company_data.get('registration_place', ''),
                business_sphere=company_data.get('business_sphere', ''),
                company_zodiac=company_zodiac,
                owner_name=company_data.get('owner_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                owner_birth_date=self._format_date_safe(company_data.get('owner_birth_date')),
                owner_zodiac=owner_zodiac,
                owner_numerology=owner_numerology,
                director_name=company_data.get('director_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                director_birth_date=self._format_date_safe(company_data.get('director_birth_date')),
                director_zodiac=director_zodiac,
                director_numerology=director_numerology,
                astrology_data=astrology_data[:1500],
                news_data=news_data[:2000]
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini
            if not self.gemini_client:
                raise Exception("Gemini –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            chart_data = {
                "company_data": company_data,
                "astrology_data": astrology_data,
                "news_data": news_data[:2000]
            }
            
            result = self.gemini_client.generate_astro_analysis(chart_data, "business")
            logger.info(f"üìä –ë–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {company_data.get('name')} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Gemini")
            
            return result or "üìä –ë–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑ –≥–æ—Ç–æ–≤. –ü–æ–ª—É—á–µ–Ω—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –∫–æ–º–ø–∞–Ω–∏–∏."
            
        except Exception as e:
            logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
            raise Exception(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
    
    async def analyze_compatibility(self, company_data: Dict[str, Any],
                                  object_data: Dict[str, Any],
                                  object_type: str) -> str:
        """
        –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        
        Args:
            company_data (Dict): –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
            object_data (Dict): –î–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
            object_type (str): –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞ (—Å–æ—Ç—Ä—É–¥–Ω–∏–∫/–∫–ª–∏–µ–Ω—Ç/–ø–∞—Ä—Ç–Ω–µ—Ä)
            
        Returns:
            str: –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞–∫–∏ –∑–æ–¥–∏–∞–∫–∞
            company_zodiac = self._get_zodiac_safe(company_data.get('registration_date'))
            object_zodiac = self._get_zodiac_safe(object_data.get('birth_date'))
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —á–∏—Å–ª–æ
            object_numerology = 0
            if object_data.get('name'):
                object_numerology = self.numerology.calculate_name_number(
                    object_data['name']
                )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
            prompt = COMPATIBILITY_PROMPT.format(
                company_name=company_data.get('name', ''),
                company_zodiac=company_zodiac,
                business_sphere=company_data.get('business_sphere', ''),
                object_type=object_type,
                object_name=object_data.get('name', ''),
                object_birth_date=self._format_date_safe(object_data.get('birth_date')),
                object_birth_place=object_data.get('birth_place', ''),
                object_zodiac=object_zodiac,
                object_numerology=object_numerology
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini
            if not self.gemini_client:
                raise Exception("Gemini –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            chart_data = {
                "company_data": company_data,
                "object_data": object_data,
                "object_type": object_type
            }
            
            result = self.gemini_client.generate_astro_analysis(chart_data, "compatibility")
            logger.info(f"ü§ù –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ {object_type} –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ Gemini")
            
            return result or "ü§ù –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º."
            
        except Exception as e:
            logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {e}")
            raise Exception(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {e}")
    
    async def generate_daily_forecast(self, company_data: Dict[str, Any],
                                    daily_astrology: str = "",
                                    today_news: str = "") -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
        
        Args:
            company_data (Dict): –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
            daily_astrology (str): –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –¥–µ–Ω—å
            today_news (str): –ù–æ–≤–æ—Å—Ç–∏ –¥–Ω—è
            
        Returns:
            str: –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞–∫–∏ –∑–æ–¥–∏–∞–∫–∞
            company_zodiac = self._get_zodiac_safe(company_data.get('registration_date'))
            owner_zodiac = self._get_zodiac_safe(company_data.get('owner_birth_date'))
            director_zodiac = self._get_zodiac_safe(company_data.get('director_birth_date'))
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
            prompt = DAILY_FORECAST_PROMPT.format(
                company_name=company_data.get('name', ''),
                company_zodiac=company_zodiac,
                business_sphere=company_data.get('business_sphere', ''),
                owner_zodiac=owner_zodiac,
                director_zodiac=director_zodiac,
                daily_astrology=daily_astrology[:1000],
                today_news=today_news[:1500]
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini
            if not self.gemini_client:
                raise Exception("Gemini –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            chart_data = {
                "company_data": company_data,
                "daily_astrology": daily_astrology,
                "today_news": today_news[:1500]
            }
            
            result = self.gemini_client.generate_astro_analysis(chart_data, "daily")
            logger.info(f"üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {company_data.get('name')} —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ Gemini")
            
            return result or "üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –≥–æ—Ç–æ–≤. –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å."
            
        except Exception as e:
            logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
            raise Exception(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
    
    async def generate_detailed_analysis(self, company_data: Dict[str, Any],
                                       analysis_type: str,
                                       astrology_data: str = "",
                                       news_data: str = "") -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        
        Args:
            company_data (Dict): –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
            analysis_type (str): –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞ (financial/partnership/risks/three_months)
            astrology_data (str): –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            news_data (str): –ù–æ–≤–æ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            
        Returns:
            str: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        """
        try:
            if analysis_type not in DETAILED_ANALYSIS_PROMPTS:
                return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞."
            
            # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞
            prompt_template = DETAILED_ANALYSIS_PROMPTS[analysis_type]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
            prompt = prompt_template.format(
                company_name=company_data.get('name', ''),
                astrology_data=astrology_data[:1500],
                news_data=news_data[:1500]
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini
            if not self.gemini_client:
                raise Exception("Gemini –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            chart_data = {
                "company_data": company_data,
                "analysis_type": analysis_type,
                "astrology_data": astrology_data,
                "news_data": news_data[:2000]
            }
            
            result = self.gemini_client.generate_astro_analysis(chart_data, "detailed")
            logger.info(f"üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ '{analysis_type}' –¥–ª—è {company_data.get('name')} –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ Gemini")
            
            return result or "üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–æ–ª—É—á–µ–Ω—ã –≥–ª—É–±–æ–∫–∏–µ –∏–Ω—Å–∞–π—Ç—ã –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π."
            
        except Exception as e:
            logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            raise Exception(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    def _get_zodiac_safe(self, date_value: Any) -> str:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞
        
        Args:
            date_value: –ó–Ω–∞—á–µ–Ω–∏–µ –¥–∞—Ç—ã
            
        Returns:
            str: –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –∏–ª–∏ "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        """
        try:
            if isinstance(date_value, str):
                # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã
                formats = ['%Y-%m-%d', '%d.%m.%Y', '%d/%m/%Y', '%Y-%m-%dT%H:%M:%S']
                date_obj = None
                for fmt in formats:
                    try:
                        date_obj = datetime.strptime(date_value, fmt)
                        break
                    except ValueError:
                        continue
                
                if date_obj is None:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –ø–æ–ø—Ä–æ–±—É–µ–º ISO —Ñ–æ—Ä–º–∞—Ç
                    date_obj = datetime.fromisoformat(date_value)
                    
            elif isinstance(date_value, datetime):
                date_obj = date_value
            else:
                return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            
            return get_zodiac_sign(date_obj)
            
        except (ValueError, AttributeError, TypeError):
            return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    def _format_date_safe(self, date_value: Any) -> str:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
        
        Args:
            date_value: –ó–Ω–∞—á–µ–Ω–∏–µ –¥–∞—Ç—ã
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –∏–ª–∏ "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        """
        try:
            if isinstance(date_value, str):
                # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã
                formats = ['%Y-%m-%d', '%d.%m.%Y', '%d/%m/%Y', '%Y-%m-%dT%H:%M:%S']
                date_obj = None
                for fmt in formats:
                    try:
                        date_obj = datetime.strptime(date_value, fmt)
                        break
                    except ValueError:
                        continue
                
                if date_obj is None:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –ø–æ–ø—Ä–æ–±—É–µ–º ISO —Ñ–æ—Ä–º–∞—Ç
                    date_obj = datetime.fromisoformat(date_value)
                    
            elif isinstance(date_value, datetime):
                date_obj = date_value
            else:
                return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            
            return date_obj.strftime('%d.%m.%Y')
            
        except (ValueError, AttributeError, TypeError):
            return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    async def get_numerological_insights(self, company_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Å–∞–π—Ç–æ–≤
        
        Args:
            company_data (Dict): –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
            
        Returns:
            Dict[str, Any]: –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å–∞–π—Ç—ã
        """
        try:
            insights = {}
            
            # –ê–Ω–∞–ª–∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
            if company_data.get('name'):
                company_number = self.numerology.calculate_name_number(
                    company_data['name']
                )
                insights['company_numerology'] = {
                    'number': company_number,
                    'analysis': self.numerology.generate_business_recommendations(
                        company_number, 
                        company_data.get('business_sphere', '')
                    )
                }
            
            # –ê–Ω–∞–ª–∏–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞
            if company_data.get('owner_name'):
                owner_number = self.numerology.calculate_name_number(
                    company_data['owner_name']
                )
                insights['owner_numerology'] = {
                    'number': owner_number,
                    'meaning': self.numerology.get_number_meaning(owner_number)
                }
            
            # –ê–Ω–∞–ª–∏–∑ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
            if company_data.get('director_name'):
                director_number = self.numerology.calculate_name_number(
                    company_data['director_name']
                )
                insights['director_numerology'] = {
                    'number': director_number,
                    'meaning': self.numerology.get_number_meaning(director_number)
                }
            
            logger.info(f"üî¢ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å–∞–π—Ç—ã –¥–ª—è {company_data.get('name')} –ø–æ–ª—É—á–µ–Ω—ã")
            return insights
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å–∞–π—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {type(e).__name__}")
            return {}

"""
AI-–∞—Å—Ç—Ä–æ–ª–æ–≥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø–∞–Ω–∏–π –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å Google Gemini –≤–º–µ—Å—Ç–æ OpenAI
"""

from typing import Dict, Any, Optional, List
from datetime import datetime

from .prompts import ASTRO_RABBIT_SYSTEM_PROMPT
from .numerology import NumerologyCalculator
from .gemini_client import GeminiAstroClient
from astrology_api.astro_calculations import AstroCalculations
from utils.config import load_config
from utils.logger import setup_logger

logger = setup_logger()


class AstroAgent:
    """
    AI-–∞—Å—Ç—Ä–æ–ª–æ–≥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Google Gemini
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞"""
        self.config = load_config()
        
        try:
            self.gemini_client = GeminiAstroClient()
            self.numerology = NumerologyCalculator()
            self.astro_calculations = AstroCalculations()
            logger.info("‚úÖ AstroRabbit –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å Gemini –∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ —Ä–∞—Å—á–µ—Ç–∞–º–∏")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è AI-–∞—Å—Ç—Ä–æ–ª–æ–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (Gemini API): {type(e).__name__}")
            self.gemini_client = None
            self.numerology = NumerologyCalculator()
            self.astro_calculations = AstroCalculations()
    
    async def analyze_company_zodiac(self, company_info: Dict[str, Any], 
                                   news_data: str = "") -> str:
        """–ê–Ω–∞–ª–∏–∑ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ Gemini"""
        try:
            if not self.gemini_client:
                return "‚ùå AI —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            
            zodiac_sign = self._get_zodiac_safe(company_info.get('registration_date'))
            
            chart_data = {
                "company_name": company_info.get('name', ''),
                "zodiac_sign": zodiac_sign,
                "registration_date": str(company_info.get('registration_date', '')),
                "sphere": company_info.get('sphere', ''),
                "news_context": news_data[:2000] if news_data else ''
            }
            
            result = self.gemini_client.generate_astro_analysis(chart_data, "business")
            logger.info(f"‚ú® –ê–Ω–∞–ª–∏–∑ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ –¥–ª—è {company_info.get('name')} –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ Gemini")
            
            return result or "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑"
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (Gemini API): {type(e).__name__}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏."
    
    async def generate_business_forecast(self, company_data: Dict[str, Any],
                                       astrology_data: str = "",
                                       news_data: str = "") -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑–∞ —á–µ—Ä–µ–∑ Gemini"""
        try:
            if not self.gemini_client:
                return "‚ùå AI —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            
            chart_data = {
                "company_data": company_data,
                "astrology_data": astrology_data,
                "news_data": news_data[:2000]
            }
            
            result = self.gemini_client.generate_astro_analysis(chart_data, "business")
            logger.info(f"üìä –ë–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {company_data.get('name')} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Gemini")
            
            return result or "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ë–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (Gemini API): {type(e).__name__}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑–∞."
    
    async def analyze_compatibility(self, company_data: Dict[str, Any],
                                  object_data: Dict[str, Any],
                                  object_type: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ Gemini"""
        try:
            if not self.gemini_client:
                return "‚ùå AI —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            
            chart_data = {
                "company_data": company_data,
                "object_data": object_data,
                "object_type": object_type
            }
            
            result = self.gemini_client.generate_astro_analysis(chart_data, "compatibility")
            logger.info(f"ü§ù –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ {object_type} –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ Gemini")
            
            return result or "–ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (Gemini API): {type(e).__name__}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏."
    
    async def generate_daily_forecast(self, company_data: Dict[str, Any],
                                    daily_astrology: str = "",
                                    today_news: str = "") -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ —á–µ—Ä–µ–∑ Gemini"""
        try:
            if not self.gemini_client:
                return "‚ùå AI —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            
            chart_data = {
                "company_data": company_data,
                "daily_astrology": daily_astrology,
                "today_news": today_news[:1500]
            }
            
            result = self.gemini_client.generate_astro_analysis(chart_data, "daily")
            logger.info(f"üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {company_data.get('name')} —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ Gemini")
            
            return result or "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (Gemini API): {type(e).__name__}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞."
    
    async def generate_detailed_analysis(self, company_data: Dict[str, Any],
                                       analysis_type: str,
                                       astrology_data: str = "",
                                       news_data: str = "") -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ Gemini"""
        try:
            if not self.gemini_client:
                return "‚ùå AI —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            
            chart_data = {
                "company_data": company_data,
                "analysis_type": analysis_type,
                "astrology_data": astrology_data,
                "news_data": news_data[:2000]
            }
            
            result = self.gemini_client.generate_astro_analysis(chart_data, "detailed")
            logger.info(f"üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ '{analysis_type}' –¥–ª—è {company_data.get('name')} –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ Gemini")
            
            return result or "–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (Gemini API): {type(e).__name__}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."
    
    def _get_zodiac_safe(self, date_value: Any) -> str:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞"""
        try:
            from utils.helpers import get_zodiac_sign
            
            if isinstance(date_value, datetime):
                return get_zodiac_sign(date_value)
            elif isinstance(date_value, str):
                # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä–æ–∫—É
                try:
                    parsed_date = datetime.strptime(date_value, '%Y-%m-%d')
                    return get_zodiac_sign(parsed_date)
                except:
                    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–Ω–∞–∫"
            else:
                return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–Ω–∞–∫"
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞: {e}")
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–Ω–∞–∫"

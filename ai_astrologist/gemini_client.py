"""
Google Gemini API –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
–ó–∞–º–µ–Ω–∞ OpenAI —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import os
from typing import Dict, Any, Optional, Union
from datetime import datetime

try:
    import google.generativeai as genai
    from google.generativeai.types import GenerateContentResponse
    GEMINI_AVAILABLE = True
except ImportError:
    genai = None
    GenerateContentResponse = None
    GEMINI_AVAILABLE = False

from utils.config import load_config
from utils.logger import setup_logger

logger = setup_logger()


class GeminiAstroClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Gemini API"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini –∫–ª–∏–µ–Ω—Ç–∞"""
        self.config = load_config()
        self.model: Optional[Any] = None
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Gemini
            if not GEMINI_AVAILABLE or not genai:
                raise ImportError("Google GenAI SDK –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Gemini API
            genai.configure(api_key=self.config.gemini.api_key)  # type: ignore
            self.model = genai.GenerativeModel(self.config.gemini.model)  # type: ignore
            logger.info("üîÆ Gemini –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini: {e}")
            self.model = None
    
    def get_birth_chart(self, birth_date: datetime, latitude: float, longitude: float) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã —á–µ—Ä–µ–∑ Gemini
        
        Args:
            birth_date (datetime): –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
            latitude (float): –®–∏—Ä–æ—Ç–∞ –º–µ—Å—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
            longitude (float): –î–æ–ª–≥–æ—Ç–∞ –º–µ—Å—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
            
        Returns:
            Dict[str, Any]: –î–∞–Ω–Ω—ã–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
        """
        if not GEMINI_AVAILABLE or not self.config.gemini.api_key or not self.model:
            logger.warning("‚ö†Ô∏è Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –∫–∞—Ä—Ç—É")
            return self._get_fallback_chart(birth_date, latitude, longitude)
        
        try:
            prompt = f"""
            –°–æ–∑–¥–∞–π –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è:
            –î–∞—Ç–∞: {birth_date.strftime('%Y-%m-%d %H:%M')}
            –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {latitude}, {longitude}
            
            –í–µ—Ä–Ω–∏ JSON —Å –ø–æ–ª—è–º–∏:
            - sun_sign: –∑–Ω–∞–∫ —Å–æ–ª–Ω—Ü–∞
            - moon_sign: –∑–Ω–∞–∫ –ª—É–Ω—ã  
            - rising_sign: –≤–æ—Å—Ö–æ–¥—è—â–∏–π –∑–Ω–∞–∫
            - planets: –ø–æ–∑–∏—Ü–∏–∏ –ø–ª–∞–Ω–µ—Ç
            - houses: –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–æ–º–∞
            - aspects: –∞—Å–ø–µ–∫—Ç—ã –º–µ–∂–¥—É –ø–ª–∞–Ω–µ—Ç–∞–º–∏
            
            –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
            """
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Gemini –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
            response = self.model.generate_content(prompt)
            
            result_text = response.text
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
            import json
            try:
                if result_text:
                    # –û—á–∏—â–∞–µ–º –æ—Ç markdown —Ä–∞–∑–º–µ—Ç–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                    clean_text = result_text.strip()
                    if clean_text.startswith('```json'):
                        clean_text = clean_text.replace('```json', '').replace('```', '').strip()
                    elif clean_text.startswith('```'):
                        clean_text = clean_text.replace('```', '').strip()
                    
                    chart_data = json.loads(clean_text)
                    logger.info("‚ú® –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ Gemini")
                    return chart_data
                else:
                    return self._get_fallback_chart(birth_date, latitude, longitude)
            except json.JSONDecodeError:
                logger.warning("‚ö†Ô∏è Gemini –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç")
                return self._get_fallback_chart(birth_date, latitude, longitude)
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Gemini –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏: {type(e).__name__}")
            return self._get_fallback_chart(birth_date, latitude, longitude)
    
    def _get_fallback_chart(self, birth_date: datetime, latitude: float, longitude: float) -> Dict[str, Any]:
        """–ë–∞–∑–æ–≤–∞—è –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API"""
        from utils.helpers import get_zodiac_sign
        
        sun_sign = get_zodiac_sign(birth_date)
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö –∑–Ω–∞–∫–æ–≤
        month_offset = birth_date.month
        moon_signs = ["–û–≤–µ–Ω", "–¢–µ–ª–µ—Ü", "–ë–ª–∏–∑–Ω–µ—Ü—ã", "–†–∞–∫", "–õ–µ–≤", "–î–µ–≤–∞", 
                     "–í–µ—Å—ã", "–°–∫–æ—Ä–ø–∏–æ–Ω", "–°—Ç—Ä–µ–ª–µ—Ü", "–ö–æ–∑–µ—Ä–æ–≥", "–í–æ–¥–æ–ª–µ–π", "–†—ã–±—ã"]
        moon_sign = moon_signs[(month_offset + 3) % 12]
        rising_sign = moon_signs[(month_offset + 6) % 12]
        
        return {
            "sun_sign": sun_sign,
            "moon_sign": moon_sign,
            "rising_sign": rising_sign,
            "planets": {
                "mercury": moon_signs[(month_offset + 1) % 12],
                "venus": moon_signs[(month_offset + 2) % 12],
                "mars": moon_signs[(month_offset + 4) % 12],
                "jupiter": moon_signs[(month_offset + 8) % 12]
            },
            "houses": {
                "house_1": rising_sign,
                "house_2": moon_signs[(month_offset + 7) % 12],
                "house_10": moon_signs[(month_offset + 4) % 12]
            },
            "aspects": [
                "–°–æ–ª–Ω—Ü–µ –≤ –≥–∞—Ä–º–æ–Ω–∏–∏ —Å –õ—É–Ω–æ–π",
                "–ú–µ—Ä–∫—É—Ä–∏–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏",
                "–í–µ–Ω–µ—Ä–∞ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–∞ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤"
            ]
        }
    
    def generate_astro_analysis(self, chart_data: Dict[str, Any], analysis_type: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ Gemini
        
        Args:
            chart_data (Dict): –î–∞–Ω–Ω—ã–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
            analysis_type (str): –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            str: –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
        """
        if not GEMINI_AVAILABLE or not self.config.gemini.api_key or not self.model:
            return "–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (Gemini API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)"
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞
            analysis_prompts = {
                "personality": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ª–∏—á–Ω–æ—Å—Ç—å –ø–æ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–µ",
                "business": "–î–∞–π –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö", 
                "compatibility": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å",
                "daily": "–°–æ–∑–¥–∞–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑",
                "detailed": "–°–¥–µ–ª–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"
            }
            
            base_prompt = analysis_prompts.get(analysis_type, "–°–¥–µ–ª–∞–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")
            
            import json
            prompt = f"""
            {base_prompt} –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:
            
            {json.dumps(chart_data, ensure_ascii=False, indent=2)}
            
            –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û - –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø TELEGRAM:
            - –ù–ò–ö–û–ì–î–ê –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π HTML-—Ç–µ–≥–∏: <p>, <h1>, <h2>, <h3>, <h4>, <b>, <i>, <ul>, <li>, <hr>, <div>
            - –ù–ò–ö–û–ì–î–ê –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π Markdown: **, __, ##, ###, ---
            - –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —ç–º–æ–¥–∑–∏
            - –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ñ–æ—Ä–º–ª—è–π: "üåü –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞"
            - –°–ø–∏—Å–∫–∏ –æ—Ñ–æ—Ä–º–ª—è–π: "‚Ä¢ –ü—É–Ω–∫—Ç —Å–ø–∏—Å–∫–∞"
            - –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –¥–æ–±–∞–≤–ª—è–π –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
            
            –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –≠–ú–û–î–ó–ò:
            - üåü –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –≤–∞–∂–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
            - ‚≠ê –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            - üíº –¥–ª—è –±–∏–∑–Ω–µ—Å-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            - ‚ö° –¥–ª—è —ç–Ω–µ—Ä–≥–∏—á–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤
            - üöÄ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Ä–∞–∑–≤–∏—Ç–∏—è
            - ‚ö†Ô∏è –¥–ª—è —Ä–∏—Å–∫–æ–≤ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
            - üíé –¥–ª—è —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω
            - üîÆ –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            - üìà –¥–ª—è —Ä–æ—Å—Ç–∞ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            - ü§ù –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤ –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π
            - üéØ –¥–ª—è —Ü–µ–ª–µ–π –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
            - üí° –¥–ª—è –∏–Ω—Å–∞–π—Ç–æ–≤ –∏ –∏–¥–µ–π
            - üî¢ –¥–ª—è –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
            - üåç –¥–ª—è –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
            - ‚ú® –¥–ª—è –∑–∞–∫–ª—é—á–µ–Ω–∏–π –∏ –∏—Ç–æ–≥–æ–≤
            
            –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—ã–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
            –ò—Å–ø–æ–ª—å–∑—É–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ –¥–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
            –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º.
            """
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Gemini –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞
            logger.info(f"üîÆ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini –¥–ª—è {analysis_type}")
            logger.debug(f"–ü—Ä–æ–º–ø—Ç –¥–ª—è Gemini ({len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤): {prompt[:200]}...")
            
            response = self.model.generate_content(prompt)
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Gemini: {response}")
            
            if not response:
                logger.error(f"‚ùå Gemini –≤–µ—Ä–Ω—É–ª None –¥–ª—è {analysis_type}")
                raise Exception("Gemini response is None")
            
            if not hasattr(response, 'text'):
                logger.error(f"‚ùå Gemini response –Ω–µ –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ 'text': {dir(response)}")
                raise Exception("Gemini response has no text attribute")
            
            result = response.text
            if not result:
                logger.error(f"‚ùå Gemini response.text –ø—É—Å—Ç–æ–π")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
                if hasattr(response, 'parts') and response.parts:
                    logger.info("üîç –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ response.parts")
                    result = ''.join([part.text for part in response.parts if hasattr(part, 'text')])
                
                if not result:
                    raise Exception("Gemini returned empty text")
            
            if len(result.strip()) < 100:
                logger.warning(f"‚ö†Ô∏è Gemini –≤–µ—Ä–Ω—É–ª –∫–æ—Ä–æ—Ç–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ({len(result)} —Å–∏–º–≤–æ–ª–æ–≤): {result}")
                # –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É, –∞ –ø—Ä–æ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                logger.info("üîÑ –ü—Ä–æ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Gemini")
                response2 = self.model.generate_content(prompt + "\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ –º–∏–Ω–∏–º—É–º –Ω–∞ 1000 —Å–ª–æ–≤.")
                if response2 and hasattr(response2, 'text') and response2.text:
                    result = response2.text
            
            logger.info(f"üîÆ Gemini –∞–Ω–∞–ª–∏–∑ '{analysis_type}' –∑–∞–≤–µ—Ä—à–µ–Ω ({len(result)} —Å–∏–º–≤–æ–ª–æ–≤)")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Gemini –∞–Ω–∞–ª–∏–∑–∞: {type(e).__name__}: {e}")
            
            # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
            try:
                logger.info("üîÑ –ü—Ä–æ–±—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Gemini")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ chart_data
                company_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è"
                company_date = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
                company_sphere = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
                
                if isinstance(chart_data, dict):
                    if 'company_name' in chart_data:
                        company_name = chart_data['company_name']
                    elif 'name' in chart_data:
                        company_name = chart_data['name']
                    
                    if 'registration_date' in chart_data:
                        company_date = str(chart_data['registration_date'])
                    
                    if 'business_sphere' in chart_data:
                        company_sphere = chart_data['business_sphere']
                
                simple_prompt = f"""–°–æ–∑–¥–∞–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏.
                
–î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏:
–ù–∞–∑–≤–∞–Ω–∏–µ: {company_name}
–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {company_date}
–°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {company_sphere}

–°–æ–∑–¥–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
–ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è: üåü –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, üíé –¥–ª—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π, üöÄ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.
–ú–∏–Ω–∏–º—É–º 800 —Å–ª–æ–≤."""

                fallback_response = self.model.generate_content(simple_prompt)
                if fallback_response and hasattr(fallback_response, 'text') and fallback_response.text:
                    logger.info(f"‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Gemini —É—Å–ø–µ—à–µ–Ω ({len(fallback_response.text)} —Å–∏–º–≤–æ–ª–æ–≤)")
                    return fallback_response.text
                    
            except Exception as e2:
                logger.error(f"‚ùå –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª—Å—è: {e2}")
            
            # –ï—Å–ª–∏ –≤—Å–µ –Ω–µ —É–¥–∞–ª–æ—Å—å - –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –≤—ã–∑—ã–≤–∞—é—â–∏–π –∫–æ–¥ –º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
            raise Exception(f"Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

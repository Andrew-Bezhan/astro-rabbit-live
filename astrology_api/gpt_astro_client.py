"""
Gemini-based –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫–ª–∏–µ–Ω—Ç –≤–º–µ—Å—Ç–æ ProKerala
–ó–∞–º–µ–Ω–∞ GPT –Ω–∞ Google Gemini
"""

from typing import Dict, Any, Optional
from datetime import datetime
from utils.config import load_config
from utils.logger import setup_logger

logger = setup_logger()


class GPTAstroClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –Ω–∞ –±–∞–∑–µ Gemini (–±—ã–≤—à–∏–π GPT)"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini –∫–ª–∏–µ–Ω—Ç–∞"""
        self.config = load_config()
        try:
            from ai_astrologist.gemini_client import GeminiAstroClient
            self.gemini_client = GeminiAstroClient()
            logger.info("üîÆ Gemini –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Gemini –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {type(e).__name__}")
            self.gemini_client = None
    
    async def get_birth_chart(self, birth_date: datetime, latitude: float, longitude: float) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã —á–µ—Ä–µ–∑ Gemini"""
        if not self.gemini_client:
            logger.warning("‚ö†Ô∏è Gemini –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã")
            return self._get_fallback_chart(birth_date, latitude, longitude)
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Gemini –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
            chart_data = self.gemini_client.get_birth_chart(birth_date, latitude, longitude)
            logger.info("‚ú® –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ Gemini")
            return chart_data
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Gemini –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏: {type(e).__name__}")
            return self._get_fallback_chart(birth_date, latitude, longitude)
    
    def _get_fallback_chart(self, birth_date: datetime, latitude: float, longitude: float) -> Dict[str, Any]:
        """–ë–∞–∑–æ–≤–∞—è –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API"""
        from utils.helpers import get_zodiac_sign
        
        sun_sign = get_zodiac_sign(birth_date)
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö –∑–Ω–∞–∫–æ–≤
        month_offset = birth_date.month
        moon_signs = ["–û–≤–µ–Ω", "–¢–µ–ª–µ—Ü", "–ë–ª–∏–∑–Ω–µ—Ü—ã", "–†–∞–∫", "–õ–µ–≤", "–î–µ–≤–∞", 
                     "–í–µ—Å—ã", "–°–∫–æ—Ä–ø–∏–æ–Ω", "–°—Ç—Ä–µ–ª–µ—Ü", "–ö–æ–∑–µ—Ä–æ–≥", "–í–æ–¥–æ–ª–µ–π", "–†—ã–±—ã"]
        moon_sign = moon_signs[(month_offset + 3) % 12]
        ascendant = moon_signs[(month_offset + 6) % 12]
        
        return {
            "sun_sign": sun_sign,
            "moon_sign": moon_sign,
            "ascendant": ascendant,
            "planets": {
                "mercury": moon_signs[(month_offset + 1) % 12],
                "venus": moon_signs[(month_offset + 2) % 12],
                "mars": moon_signs[(month_offset + 4) % 12],
                "jupiter": moon_signs[(month_offset + 8) % 12]
            },
            "aspects": [
                "–°–æ–ª–Ω—Ü–µ –≤ –≥–∞—Ä–º–æ–Ω–∏–∏ —Å –õ—É–Ω–æ–π",
                "–ú–µ—Ä–∫—É—Ä–∏–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏",
                "–í–µ–Ω–µ—Ä–∞ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–∞ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤"
            ],
            "interpretation": f"–ö–æ–º–ø–∞–Ω–∏—è –ø–æ–¥ –∑–Ω–∞–∫–æ–º {sun_sign} –æ–±–ª–∞–¥–∞–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–º–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∑–Ω–∞–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞–º–∏ –≤ –±–∏–∑–Ω–µ—Å–µ."
        }
    
    def _get_coordinates_by_city(self, city: str) -> tuple[float, float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≥–æ—Ä–æ–¥–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        # –ë–∞–∑–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫—Ä—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
        city_coords = {
            "–º–æ—Å–∫–≤–∞": (55.7558, 37.6176),
            "—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥": (59.9311, 30.3609),
            "–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": (55.0084, 82.9357),
            "–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": (56.8431, 60.6454),
            "–∫–∞–∑–∞–Ω—å": (55.8304, 49.0661),
            "–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥": (56.2965, 43.9361),
            "—á–µ–ª—è–±–∏–Ω—Å–∫": (55.1644, 61.4368),
            "—Å–∞–º–∞—Ä–∞": (53.2001, 50.15),
            "–æ–º—Å–∫": (54.9885, 73.3242),
            "—Ä–æ—Å—Ç–æ–≤-–Ω–∞-–¥–æ–Ω—É": (47.2357, 39.7015)
        }
        
        city_lower = city.lower().strip()
        return city_coords.get(city_lower, (55.7558, 37.6176))  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ú–æ—Å–∫–≤–∞



"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram –±–æ—Ç–∞
"""

import asyncio
from typing import Dict, Any
from datetime import datetime
from telegram import Update, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, CallbackContext

from .keyboards import BotKeyboards
from .states import BotState, StateManager
from ai_astrologist.astro_agent import AstroAgent
from ai_astrologist.numerology import NumerologyCalculator
from news_parser.news_analyzer import NewsAnalyzer
from embedding.embedding_manager import EmbeddingManager
from utils.helpers import validate_date, clean_company_name, is_valid_russian_name
from utils.logger import setup_logger

logger = setup_logger()


class BotHandlers:
    """–ö–ª–∞—Å—Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self.state_manager = StateManager()
        self.keyboards = BotKeyboards()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–• —Å–µ—Ä–≤–∏—Å–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        try:
            # –í—Å–µ–≥–¥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
            self.astro_agent = AstroAgent()
            self.numerology = NumerologyCalculator()
            self.news_analyzer = NewsAnalyzer()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
            try:
                from validation_agent.validator import ValidationAgent
                self.validator = ValidationAgent()
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –í–∞–ª–∏–¥–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                self.validator = None
            
            # Embedding manager –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
            try:
                self.embedding_manager = EmbeddingManager()
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Embedding manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                self.embedding_manager = None
                
            # Qdrant –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
            try:
                from embedding.qdrant_client import QdrantClient
                self.qdrant_client = QdrantClient()
                logger.info("‚úÖ Qdrant –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Qdrant –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                self.qdrant_client = None
                
            logger.info("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –ê—Å—Ç—Ä–æ–±–æ—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏
            self.astro_agent = AstroAgent() if not hasattr(self, 'astro_agent') else self.astro_agent
            self.numerology = NumerologyCalculator()
            self.news_analyzer = NewsAnalyzer() if not hasattr(self, 'news_analyzer') else self.news_analyzer
            self.embedding_manager = None
            self.qdrant_client = None
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        if not update.effective_user or not update.message:
            return
            
        user = update.effective_user
        
        welcome_text = f"""
üîÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê—Å—Ç—Ä–æ–±–æ—Ç, {user.first_name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!

–Ø ‚Äî AstroRabbit, –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏ –∏ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏. 

‚ú® –ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ üîÆ –û–ø—Ä–µ–¥–µ–ª—è—Ç—å –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏
‚Ä¢ üìà –°–æ—Å—Ç–∞–≤–ª—è—Ç—å –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑—ã
‚Ä¢ ü§ù –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
‚Ä¢ üìÖ –î–∞–≤–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã
‚Ä¢ üè¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏ –∫–æ–º–ø–∞–Ω–∏–π

üåü –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –ü—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–π, –∞ –Ω–µ –¥–ª—è –ª—é–¥–µ–π
- AI-–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
- –£—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–Ω–¥–æ–≤
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –±–∏–∑–Ω–µ—Å-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ! üëá
        """
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=self.keyboards.get_main_menu(),
            parse_mode=None
        )
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        try:
            from database.connection import get_session
            from database.crud import UserCRUD
            
            with get_session() as session:
                existing_user = UserCRUD.get_user_by_telegram_id(session, user.id)
                if not existing_user:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    UserCRUD.create_user(
                        session=session,
                        telegram_id=user.id,
                        username=user.username,
                        first_name=user.first_name,
                        last_name=user.last_name
                    )
                    logger.info(f"üë§ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î: {user.id}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: {e}")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.state_manager.reset_user(user.id)
        
        logger.info(f"üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.first_name or '–ê–Ω–æ–Ω–∏–º–Ω—ã–π'}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    async def _check_company_required_and_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE, analysis_type: str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–º–ø–∞–Ω–∏–π –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –∞–Ω–∞–ª–∏–∑–∞"""
        if not update.effective_user or not update.message:
            return
            
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π
        try:
            from database.crud import CompanyCRUD
            from database.connection import get_session
            
            with get_session() as session:
                user_companies = CompanyCRUD.get_companies_by_user(session, user_id)
                
                if not user_companies:
                    # –ù–µ—Ç –∫–æ–º–ø–∞–Ω–∏–π - –Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é
                    await update.message.reply_text(
                        """üè¢ –í–´–ë–ï–†–ò–¢–ï –ö–û–ú–ü–ê–ù–ò–Æ –ò–ó –í–ê–®–ï–ì–û –°–ü–ò–°–ö–ê
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π.

üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:
1Ô∏è‚É£ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é –≤ "–ú–æ–∏ –∫–æ–º–ø–∞–Ω–∏–∏"
2Ô∏è‚É£ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
3Ô∏è‚É£ –í—ã–±—Ä–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

üöÄ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏:""",
                        parse_mode=None,
                        reply_markup=self.keyboards.get_companies_required_menu()
                    )
                    return
                else:
                    # –ï—Å—Ç—å –∫–æ–º–ø–∞–Ω–∏–∏ - –∑–∞–ø—É—Å–∫–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∞–Ω–∞–ª–∏–∑
                    if analysis_type == "zodiac":
                        await self._start_zodiac_analysis(update, context)
                    elif analysis_type == "forecast":
                        await self._start_business_forecast(update, context)
                    elif analysis_type == "compatibility":
                        await self._start_compatibility_check(update, context)
                        
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–ø–∞–Ω–∏–π: {e}")
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∫–æ–º–ø–∞–Ω–∏–∏
            await update.message.reply_text(
                """üè¢ –í–´–ë–ï–†–ò–¢–ï –ö–û–ú–ü–ê–ù–ò–Æ –ò–ó –í–ê–®–ï–ì–û –°–ü–ò–°–ö–ê

üìã –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π.

üí° –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–ø–∞–Ω–∏—è–º–∏:""",
                parse_mode=None,
                reply_markup=self.keyboards.get_companies_required_menu()
            )
    
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –±–æ–∫–æ–≤–æ–≥–æ –º–µ–Ω—é
    async def zodiac_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /zodiac - –∞–Ω–∞–ª–∏–∑ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞"""
        await self._check_company_required_and_start(update, context, "zodiac")
    
    async def forecast_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /forecast - –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑"""
        await self._check_company_required_and_start(update, context, "forecast")
    
    async def compatibility_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /compatibility - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        await self._check_company_required_and_start(update, context, "compatibility")
    
    async def companies_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /companies - –º–æ–∏ –∫–æ–º–ø–∞–Ω–∏–∏"""
        await self._show_companies_menu(update, context)
    
    async def cabinet_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /cabinet - –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"""
        await self._show_personal_cabinet(update, context)
    
    async def tariffs_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /tariffs - —Ç–∞—Ä–∏—Ñ—ã"""
        await self._show_tariffs_menu(update, context)
    
    async def daily_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /daily - –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã"""
        await self._show_daily_forecast_menu(update, context)
    
    async def settings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        await self._show_settings_menu(update, context)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        if not update.message:
            return
            
        help_text = """
üìö –°–ü–†–ê–í–ö–ê –ü–û –ê–°–¢–†–û–ë–û–¢–£

üîÆ –£–∑–Ω–∞—Ç—å –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –ö–æ–º–ø–∞–Ω–∏–∏
–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ –ø–æ –¥–∞—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏.

üìà –ë–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –ö–æ–º–ø–∞–Ω–∏–∏  
–ü–æ–ª–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å —É—á–µ—Ç–æ–º:
- –î–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏ (–Ω–∞–∑–≤–∞–Ω–∏–µ, –¥–∞—Ç–∞, –º–µ—Å—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–µ –∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ
- –¢–µ–∫—É—â–∏—Ö —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–Ω–¥–æ–≤
- –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞

ü§ù –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
–ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏ —Å:
- –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
- –ö–ª–∏–µ–Ω—Ç–∞–º–∏  
- –ü–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏

üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É—Ç—Ä–µ–Ω–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã (–≤ 8:00) –Ω–∞ –æ—Å–Ω–æ–≤–µ:
- –ü—Ä–æ—Ñ–∏–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
- –ê–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –≤–ª–∏—è–Ω–∏–π
- –°–≤–µ–∂–∏—Ö —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π

üè¢ –ú–æ–∏ –∫–æ–º–ø–∞–Ω–∏–∏
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –∫–æ–º–ø–∞–Ω–∏–π.

‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –î–µ—Ç–∞–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã (—Ñ–∏–Ω–∞–Ω—Å—ã, –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ, —Ä–∏—Å–∫–∏)
- –ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ 3 –º–µ—Å—è—Ü–∞
- –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏–º–µ–Ω
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤

‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /support
        """
        
        await update.message.reply_text(
            help_text,
            parse_mode=None
        )
    
    async def message_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not update.effective_user or not update.message or not update.message.text:
            return
            
        user_id = update.effective_user.id
        message_text = update.message.text
        current_state = self.state_manager.get_state(user_id)
        
        logger.info(f"üí¨ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: '{message_text}' (—Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state.name})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π
        if message_text.startswith('/'):
            # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
            if message_text == '/companies':
                await self.companies_command(update, context)
                return
            elif message_text == '/start':
                await self.start_command(update, context)
                return
            elif message_text == '/help':
                await self.help_command(update, context)
                return
            elif message_text == '/zodiac':
                await self.zodiac_command(update, context)
                return
            elif message_text == '/forecast':
                await self.forecast_command(update, context)
                return
            elif message_text == '/compatibility':
                await self.compatibility_command(update, context)
                return
            elif message_text == '/cabinet':
                await self.cabinet_command(update, context)
                return
            elif message_text == '/tariffs':
                await self.tariffs_command(update, context)
                return
            elif message_text == '/daily':
                await self.daily_command(update, context)
                return
            elif message_text == '/settings':
                await self.settings_command(update, context)
                return
            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
                await update.message.reply_text(
                    "ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                    reply_markup=self.keyboards.get_main_menu()
                )
                self.state_manager.reset_user(user_id)
                return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
        if current_state == BotState.IDLE:
            await self._handle_main_menu(update, context, message_text)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        elif current_state == BotState.ZODIAC_COMPANY_NAME:
            await self._handle_zodiac_company_name(update, context, message_text)
        elif current_state == BotState.ZODIAC_REG_DATE:
            await self._handle_zodiac_reg_date(update, context, message_text)
        elif current_state == BotState.ZODIAC_REG_PLACE:
            result = self._handle_zodiac_reg_place(update, context, message_text)
            if result is not None:
                await result
        
        elif current_state == BotState.BUSINESS_COMPANY_NAME:
            await self._handle_business_company_name(update, context, message_text)
        elif current_state == BotState.BUSINESS_REG_DATE:
            await self._handle_business_reg_date(update, context, message_text)
        elif current_state == BotState.BUSINESS_REG_PLACE:
            await self._handle_business_reg_place(update, context, message_text)
        elif current_state == BotState.BUSINESS_OWNER_NAME:
            await self._handle_business_owner_name(update, context, message_text)
        elif current_state == BotState.BUSINESS_OWNER_BIRTH:
            await self._handle_business_owner_birth(update, context, message_text)
        elif current_state == BotState.BUSINESS_DIRECTOR_NAME:
            await self._handle_business_director_name(update, context, message_text)
        elif current_state == BotState.BUSINESS_DIRECTOR_BIRTH:
            await self._handle_business_director_birth(update, context, message_text)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∫–æ–º–ø–∞–Ω–∏–∏
        elif current_state == BotState.PROFILE_COMPANY_NAME:
            await self._handle_profile_company_name(update, context, message_text)
        elif current_state == BotState.PROFILE_REG_DATE:
            await self._handle_profile_reg_date(update, context, message_text)
        elif current_state == BotState.PROFILE_REG_PLACE:
            await self._handle_profile_reg_place(update, context, message_text)
        elif current_state == BotState.PROFILE_OWNER_NAME:
            await self._handle_profile_owner_name(update, context, message_text)
        elif current_state == BotState.PROFILE_OWNER_BIRTH:
            await self._handle_profile_owner_birth(update, context, message_text)
        elif current_state == BotState.PROFILE_DIRECTOR_NAME:
            await self._handle_profile_director_name(update, context, message_text)
        elif current_state == BotState.PROFILE_DIRECTOR_BIRTH:
            await self._handle_profile_director_birth(update, context, message_text)
        
        elif current_state == BotState.COMPAT_OBJECT_NAME:
            # await self._handle_compat_object_name(update, context, message_text)
            await self._handle_main_menu(update, context, "üîÆ –£–∑–Ω–∞—Ç—å –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –ö–æ–º–ø–∞–Ω–∏–∏")
        elif current_state == BotState.COMPAT_OBJECT_BIRTH:
            # await self._handle_compat_object_birth(update, context, message_text)
            await self._handle_main_menu(update, context, "üîÆ –£–∑–Ω–∞—Ç—å –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –ö–æ–º–ø–∞–Ω–∏–∏")
        elif current_state == BotState.COMPAT_OBJECT_PLACE:
            # await self._handle_compat_object_place(update, context, message_text)
            await self._handle_main_menu(update, context, "üîÆ –£–∑–Ω–∞—Ç—å –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –ö–æ–º–ø–∞–Ω–∏–∏")
        
        else:
            if update.message:
                await update.message.reply_text(
                    "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.",
                    reply_markup=self.keyboards.get_main_menu()
                )
            self.state_manager.reset_user(user_id)
    
    async def _handle_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        if not update.effective_user:
            return
        user_id = update.effective_user.id
        
        if text == "üîÆ –£–∑–Ω–∞—Ç—å –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –ö–æ–º–ø–∞–Ω–∏–∏":
            await self._check_company_required_and_start(update, context, "zodiac")
        
        elif text == "üìà –ë–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –ö–æ–º–ø–∞–Ω–∏–∏":
            await self._check_company_required_and_start(update, context, "forecast")
        
        elif text == "ü§ù –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å":
            await self._check_company_required_and_start(update, context, "compatibility")
        
        elif text == "üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã":
            await self._show_daily_forecast_menu(update, context)
        
        elif text == "üè¢ –ú–æ–∏ –∫–æ–º–ø–∞–Ω–∏–∏":
            await self._show_companies_menu(update, context)
        
        elif text == "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞":
            await self.help_command(update, context)
        
        elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
            await self._show_settings_menu(update, context)
        
        elif text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç":
            await self._show_personal_cabinet(update, context)
        
        elif text == "üí≥ –¢–∞—Ä–∏—Ñ—ã":
            await self._show_tariffs_menu(update, context)
        
        elif text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await self.start_command(update, context)
        
        else:
            if update.message:
                await update.message.reply_text(
                    "ü§î –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
                    reply_markup=self.keyboards.get_main_menu()
                )
    
    async def _start_zodiac_analysis(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞"""
        if not update.effective_user or not update.message:
            return
        user_id = update.effective_user.id
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
        try:
            from database.crud import CompanyCRUD
            from database.connection import get_session
            
            with get_session() as session:
                user_companies = CompanyCRUD.get_companies_by_user(session, user_id)
                
                if user_companies:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞
                    companies_text = "üîÆ –í–´–ë–ï–†–ò–¢–ï –ö–û–ú–ü–ê–ù–ò–Æ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –ó–ù–ê–ö–ê –ó–û–î–ò–ê–ö–ê\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                    
                    for i, comp in enumerate(user_companies, 1):
                        reg_date_str = '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
                        if hasattr(comp, 'registration_date') and comp.registration_date is not None:
                            try:
                                reg_date_str = comp.registration_date.strftime('%d.%m.%Y')
                            except:
                                reg_date_str = '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
                        
                        companies_text += f"""üìä {i}. {comp.name}
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg_date_str}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"""
                    
                    companies_text += "\nüí° –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å."
                    
                    await update.message.reply_text(
                        companies_text,
                        parse_mode=None,
                        reply_markup=self.keyboards.get_companies_management_menu(user_companies)
                    )
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏
                    self.state_manager.set_state(user_id, BotState.SELECTING_COMPANY_FOR_FORECAST)
                    return
                    
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–∞–Ω–∏–π: {e}")
        
        # –ï—Å–ª–∏ –∫–æ–º–ø–∞–Ω–∏–π –Ω–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        zodiac_text = """üîÆ –ê–ù–ê–õ–ò–ó –ó–ù–ê–ö–ê –ó–û–î–ò–ê–ö–ê –ö–û–ú–ü–ê–ù–ò–ò

–î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ –º–Ω–µ –Ω—É–∂–Ω—ã –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏.

üìù –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:"""
        
        await update.message.reply_text(
            zodiac_text,
            parse_mode=None,
            reply_markup=ReplyKeyboardRemove()
        )
        
        self.state_manager.set_state(user_id, BotState.ZODIAC_COMPANY_NAME)
        self.state_manager.get_user_data(user_id).reset()
    
    async def _handle_zodiac_company_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞"""
        if not update.effective_user or not update.message:
            return
        user_id = update.effective_user.id
        user_data = self.state_manager.get_user_data(user_id)
        
        # –û—á–∏—â–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        cleaned_name = clean_company_name(text.strip())
        if user_data:
            user_data.company_name = cleaned_name
        
        await update.message.reply_text(
            f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {cleaned_name}\
\
"
            "üìÖ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\
"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.12.2015",
            parse_mode=None
        )
        
        self.state_manager.set_state(user_id, BotState.ZODIAC_REG_DATE)
    
    async def _handle_zodiac_reg_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞"""
        if not update.effective_user or not update.message:
            return
        user_id = update.effective_user.id
        user_data = self.state_manager.get_user_data(user_id)
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞—Ç—É
        reg_date = validate_date(text.strip())
        if not reg_date:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\
"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.12.2015",
                parse_mode=None
            )
            return
        
        if user_data:
            user_data.registration_date = reg_date
        
        await update.message.reply_text(
            f"‚úÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg_date.strftime('%d.%m.%Y')}\
\
"
            "üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏:",
            parse_mode=None
        )
        
        self.state_manager.set_state(user_id, BotState.ZODIAC_REG_PLACE)
    
    async def _handle_zodiac_reg_place(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞"""
        if not update.effective_user or not update.message:
            return
        user_id = update.effective_user.id
        user_data = self.state_manager.get_user_data(user_id)
        
        if user_data:
            user_data.registration_place = text.strip()
        
        if not user_data or not user_data.company_name or not user_data.registration_date:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=self.keyboards.get_main_menu()
            )
            self.state_manager.reset_user(user_id)
            return
            
        logger.info(f"üîÆ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {user_data.company_name}")
        
        # –ö—Ä–∞—Ç–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        await update.message.reply_text(
            "üîÆ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏...",
            parse_mode=None
        )
        
        # –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –°–û–ì–õ–ê–°–ù–û –¢–ó
        try:
            company_info = user_data.get_company_data()
            
            # –ü–æ–ª—É—á–∞–µ–º –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ë–ï–ó –æ—Ç—á–µ—Ç–æ–≤ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            
            # –ü–æ–ª—É—á–∞–µ–º –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API
            astro_data = ""
            zodiac_sign = ""
            if self.astro_agent and hasattr(self.astro_agent, 'astro_calculations'):
                try:
                    # –°–æ–∑–¥–∞–µ–º –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –∫–æ–º–ø–∞–Ω–∏–∏
                    # –£—á–∏—Ç—ã–≤–∞–µ–º –≥–æ—Ä–æ–¥ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–∞—Ö
                    city = user_data.registration_place or "–ú–æ—Å–∫–≤–∞"
                    logger.info(f"üåç –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ä–æ–¥ {city} –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤")
                    
                    natal_chart = await self.astro_agent.astro_calculations.get_company_natal_chart(
                        user_data.company_name,
                        user_data.registration_date,
                        city
                    )
                    
                    if natal_chart and natal_chart.get('basic_info'):
                        zodiac_sign = natal_chart['basic_info'].get('sun_sign', '')
                        characteristics = natal_chart.get('interpretation', {})
                        astro_data = f"""
‚ôà –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: {zodiac_sign}
üî• –≠–ª–µ–º–µ–Ω—Ç: {natal_chart['basic_info'].get('element', '')}
ü™ê –£–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {natal_chart['basic_info'].get('ruler', '')}
üíº –ë–∏–∑–Ω–µ—Å-—Å—Ç–∏–ª—å: {characteristics.get('business_style', '')}
üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã: {characteristics.get('financial_outlook', '')}
üìà –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞: {characteristics.get('growth_potential', '')}
                        """
                except Exception as e:
                    logger.error(f"‚ùå ProKerala API –û–ë–Ø–ó–ê–¢–ï–õ–ï–ù —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó: {e}")
                    await update.message.reply_text(
                        f"‚ùå –û—à–∏–±–∫–∞: ProKerala API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        reply_markup=self.keyboards.get_main_menu(),
                        parse_mode=None
                    )
                    self.state_manager.reset_user(user_id)
                    return
            else:
                logger.error("‚ùå AstroAgent –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –û–ë–Ø–ó–ê–¢–ï–õ–ï–ù —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó")
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞: –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=self.keyboards.get_main_menu(),
                    parse_mode=None
                )
                self.state_manager.reset_user(user_id)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ë–ï–ó –æ—Ç—á–µ—Ç–æ–≤ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            
            news_data = ""
            if self.news_analyzer:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç—Ä–µ–º –±–ª–æ–∫–∞–º —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
                    
                    # –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
                    political_news = await self.news_analyzer.news_client.get_politics_news(limit=3)
                    politics_summary = "üèõÔ∏è –ü–û–õ–ò–¢–ò–ö–ê:\n"
                    if political_news:
                        for i, article in enumerate(political_news[:3], 1):
                            title = article.get('title', '')[:80]
                            politics_summary += f"{i}. {title}...\n"
                    
                    # –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
                    business_news = await self.news_analyzer.news_client.get_business_news(limit=3)
                    economy_summary = "\nüíº –≠–ö–û–ù–û–ú–ò–ö–ê:\n"
                    if business_news:
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –∫–∞–∫ dict —Å results
                        news_list = business_news if isinstance(business_news, list) else business_news.get('results', [])
                        for i, article in enumerate(news_list[:3], 1):
                            title = article.get('title', '')[:80]
                            economy_summary += f"{i}. {title}...\n"
                    
                    # –ù–æ–≤–æ—Å—Ç–∏ —Ñ–æ–Ω–¥–æ–≤–æ–π –±–∏—Ä–∂–∏
                    stock_news = await self.news_analyzer.news_client.get_stock_market_news(limit=3)
                    logger.info(f"üìà –ü–æ–ª—É—á–µ–Ω–æ {len(stock_news) if stock_news else 0} –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Ñ–æ–Ω–¥–æ–≤–æ–º—É —Ä—ã–Ω–∫—É")
                    stock_summary = "\nüìà –§–û–ù–î–û–í–ê–Ø –ë–ò–†–ñ–ê:\n"
                    if stock_news:
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –∫–∞–∫ dict —Å results
                        news_list = stock_news if isinstance(stock_news, list) else stock_news.get('results', [])
                        for i, article in enumerate(news_list[:3], 1):
                            title = article.get('title', '')[:80]
                            if any(word in title.lower() for word in ['–∞–∫—Ü–∏', '–±–∏—Ä–∂–∞', '–∏–Ω–≤–µ—Å—Ç', '—Ä—ã–Ω–æ–∫']):
                                stock_summary += f"{i}. {title}...\n"
                    
                    news_data = politics_summary + economy_summary + stock_summary
                    
                except Exception as e:
                    logger.error(f"‚ùå –ù–æ–≤–æ—Å—Ç–Ω—ã–µ API –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó: {e}")
                    await update.message.reply_text(
                        f"‚ùå –û—à–∏–±–∫–∞: –ù–æ–≤–æ—Å—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –Ω–æ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        reply_markup=self.keyboards.get_main_menu(),
                        parse_mode=None
                    )
                    self.state_manager.reset_user(user_id)
                    return
            else:
                logger.error("‚ùå NewsAnalyzer –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –û–ë–Ø–ó–ê–¢–ï–õ–ï–ù —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó")
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞: –ù–æ–≤–æ—Å—Ç–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=self.keyboards.get_main_menu(),
                    parse_mode=None
                )
                self.state_manager.reset_user(user_id)
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ LLM –ë–ï–ó –æ—Ç—á–µ—Ç–æ–≤ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ LLM —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
            if self.astro_agent:
                try:
                    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≥–µ–Ω—Ç–∞
                    company_data = {
                        'name': user_data.company_name,
                        'registration_date': user_data.registration_date,
                        'registration_place': user_data.registration_place
                    }
                    
                    # –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    full_analysis = await self.astro_agent.analyze_company_zodiac(
                        company_data, 
                        news_data=news_data
                    )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
                    if self.numerology and user_data.company_name:
                        name_number = self.numerology.calculate_name_number(user_data.company_name)
                        numerology_interpretation = self.numerology.get_number_interpretation(name_number)
                        full_analysis += f"""

üî¢ –ù–£–ú–ï–†–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó:
üéØ –ß–∏—Å–ª–æ –∏–º–µ–Ω–∏: {name_number}
{numerology_interpretation}"""
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ LLM –∞–Ω–∞–ª–∏–∑–∞: {e}")
                    # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–∂–µ –±–µ–∑ LLM
                    full_analysis = f"""üîÆ –ê–°–¢–†–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –ö–û–ú–ü–ê–ù–ò–ò

{astro_data}

üìä –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –ó–ù–ê–ö–ê {zodiac_sign}:
üåü –ö–æ–º–ø–∞–Ω–∏—è –ø–æ–¥ –∑–Ω–∞–∫–æ–º {zodiac_sign} –æ–±–ª–∞–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –¥–µ–ª–æ–≤—ã–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞–º–∏
üíé –≠—Ç–æ—Ç –∑–Ω–∞–∫ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç—Å—Ç–≤—É–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º –±–∏–∑–Ω–µ—Å–∞
‚ú® –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—á–∏—Ç—ã–≤–∞—Ç—å –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ü–∏–∫–ª—ã –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏–π

üåü –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
üíº –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∑–Ω–∞–∫–∞ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –±–∏–∑–Ω–µ—Å–∞
üìÖ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –≤–∞–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
üöÄ –†–∞–∑–≤–∏–≤–∞–π—Ç–µ —Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞"""
            else:
                # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                full_analysis = f"""üîÆ –ê–°–¢–†–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –ö–û–ú–ü–ê–ù–ò–ò

{astro_data}

üìä –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –ó–ù–ê–ö–ê {zodiac_sign}:
üåü –ö–æ–º–ø–∞–Ω–∏—è –ø–æ–¥ –∑–Ω–∞–∫–æ–º {zodiac_sign} –æ–±–ª–∞–¥–∞–µ—Ç –æ—Å–æ–±—ã–º–∏ –¥–µ–ª–æ–≤—ã–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞–º–∏
üíé –≠—Ç–æ—Ç –∑–Ω–∞–∫ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –±–∏–∑–Ω–µ—Å-—Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ –∏ –ø–æ–¥—Ö–æ–¥—ã
‚ú® –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ü–∏–∫–ª—ã –≤–ª–∏—è—é—Ç –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏

üåü –ë–ê–ó–û–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
üíº –†–∞–∑–≤–∏–≤–∞–π—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞—à–∏–º –∑–Ω–∞–∫–æ–º
üìÖ –£—á–∏—Ç—ã–≤–∞–π—Ç–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–∏–æ–¥—ã –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
üöÄ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∑–Ω–∞–∫–∞ –¥–ª—è —Ä–æ—Å—Ç–∞ –±–∏–∑–Ω–µ—Å–∞"""
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ë–ï–ó —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ë–ï–ó —É–∫–∞–∑–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            final_result = full_analysis
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
            await self._send_long_message(update, final_result, self.keyboards.get_main_menu())
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            try:
                from database.connection import db_manager
                from database.crud import UserCRUD, AnalysisCRUD
                
                with db_manager.get_session() as session:
                    user_db = UserCRUD.get_user_by_telegram_id(session, user_id)
                    if user_db and user_data.company_name and user_data.registration_date:
                        # –ü—Ä–∏–≤–æ–¥–∏–º Column –∫ int –¥–ª—è –ª–∏–Ω—Ç–µ—Ä–∞
                        db_user_id = int(user_db.id)  # type: ignore
                        AnalysisCRUD.create_analysis(
                            session=session,
                            user_id=db_user_id,  # type: ignore
                            analysis_type="zodiac_full_tz",
                            result_text=final_result,
                            input_data={
                                'company_name': user_data.company_name,
                                'registration_date': user_data.registration_date.isoformat(),
                                'registration_place': user_data.registration_place or ""
                            },
                            zodiac_signs=[zodiac_sign] if zodiac_sign else [],
                            news_used=bool(news_data),
                            numerology_used=bool(self.numerology),
                            astrology_api_used=True
                        )
                        logger.info(f"üíæ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –¢–ó —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞: {e}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥ –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î
            if self.embedding_manager:
                try:
                    await self.embedding_manager.save_user_dialog(
                        user_id, 
                        f"–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ –¥–ª—è {user_data.company_name}",
                        company_info
                    )
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î: {e}")
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            result = self._offer_save_company_profile(update, user_data, final_result)
            if result is not None:
                await result
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–ø–∞–Ω–∏—é –≤ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self._auto_save_company_profile(update, user_data)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞: {e}")
            await update.message.reply_text(
                "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=self.keyboards.get_main_menu(),
                parse_mode='HTML'
            )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        self.state_manager.reset_user(user_id)
    
    async def _send_long_message(self, update: Update, text: str, reply_markup=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –Ω–∞ —á–∞—Å—Ç–∏"""
        MAX_MESSAGE_LENGTH = 4000  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –æ—Ç –ª–∏–º–∏—Ç–∞ Telegram –≤ 4096
        
        if len(text) <= MAX_MESSAGE_LENGTH:
            # –ö–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            if update.message:
                await update.message.reply_text(
                    text,
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )
            return
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        parts = []
        current_part = ""
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∞–±–∑–∞—Ü–∞–º
        paragraphs = text.split('\n\n')
        
        for paragraph in paragraphs:
            # –ï—Å–ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Å–∞–º –ø–æ —Å–µ–±–µ
            if len(paragraph) > MAX_MESSAGE_LENGTH:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ —á–∞—Å—Ç—å
                if current_part:
                    parts.append(current_part.strip())
                    current_part = ""
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
                sentences = paragraph.split('. ')
                temp_part = ""
                
                for sentence in sentences:
                    if len(temp_part + sentence + '. ') > MAX_MESSAGE_LENGTH:
                        if temp_part:
                            parts.append(temp_part.strip())
                        temp_part = sentence + '. '
                    else:
                        temp_part += sentence + '. '
                
                if temp_part:
                    current_part = temp_part
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ –≤ —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å
                if len(current_part + '\n\n' + paragraph) > MAX_MESSAGE_LENGTH:
                    # –ù–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å
                    if current_part:
                        parts.append(current_part.strip())
                    current_part = paragraph
                else:
                    # –ü–æ–º–µ—â–∞–µ—Ç—Å—è - –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Ç–µ–∫—É—â–µ–π —á–∞—Å—Ç–∏
                    if current_part:
                        current_part += '\n\n' + paragraph
                    else:
                        current_part = paragraph
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
        if current_part:
            parts.append(current_part.strip())
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏
        for i, part in enumerate(parts):
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
            keyboard = reply_markup if i == len(parts) - 1 else None
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —á–∞—Å—Ç–µ–π –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π
            if len(parts) > 1:
                part_header = f"üìÑ –ß–∞—Å—Ç—å {i + 1} –∏–∑ {len(parts)}\n\n"
                part = part_header + part
            
            if update.message:
                await update.message.reply_text(
                    part,
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            await asyncio.sleep(0.5)
    
    async def _start_business_forecast(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑–∞"""
        if not update.effective_user or not update.message:
            return
        user_id = update.effective_user.id
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
        try:
            from database.crud import CompanyCRUD
            from database.connection import get_session
            
            with get_session() as session:
                user_companies = CompanyCRUD.get_companies_by_user(session, user_id)
                
                if user_companies:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞
                    companies_text = "üìà –í–´–ë–ï–†–ò–¢–ï –ö–û–ú–ü–ê–ù–ò–Æ –î–õ–Ø –ë–ò–ó–ù–ï–°-–ü–†–û–ì–ù–û–ó–ê\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                    
                    for i, comp in enumerate(user_companies, 1):
                        reg_date_str = '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
                        if hasattr(comp, 'registration_date') and comp.registration_date is not None:
                            try:
                                reg_date_str = comp.registration_date.strftime('%d.%m.%Y')
                            except:
                                reg_date_str = '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
                        
                        reg_place = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                        if hasattr(comp, 'registration_place') and comp.registration_place is not None:
                            reg_place = str(comp.registration_place)
                        
                        companies_text += f"""üìä {i}. {comp.name}
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg_date_str}
üèôÔ∏è –ú–µ—Å—Ç–æ: {reg_place}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"""
                    
                    companies_text += "\nüí° –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å."
                    
                    await update.message.reply_text(
                        companies_text,
                        parse_mode=None,
                        reply_markup=self.keyboards.get_companies_management_menu(user_companies)
                    )
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏
                    self.state_manager.set_state(user_id, BotState.SELECTING_COMPANY_FOR_FORECAST)
                    return
                    
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–∞–Ω–∏–π: {e}")
        
        # –ï—Å–ª–∏ –∫–æ–º–ø–∞–Ω–∏–π –Ω–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        forecast_text = """üìà –ü–û–õ–ù–´–ô –ë–ò–ó–ù–ï–°-–ü–†–û–ì–ù–û–ó

–î–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –º–Ω–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ:
‚Ä¢ –ö–æ–º–ø–∞–Ω–∏–∏ (–Ω–∞–∑–≤–∞–Ω–∏–µ, –¥–∞—Ç–∞ –∏ –º–µ—Å—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
‚Ä¢ –°—Ñ–µ—Ä–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–µ –∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ

üìù –ù–∞—á–Ω–µ–º —Å –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏:"""
        
        await update.message.reply_text(
            forecast_text,
            parse_mode=None,
            reply_markup=ReplyKeyboardRemove()
        )
        
        self.state_manager.set_state(user_id, BotState.BUSINESS_COMPANY_NAME)
        self.state_manager.get_user_data(user_id).reset()
    
    async def _handle_business_company_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑–∞"""
        if not update.effective_user or not update.message:
            return
        user_id = update.effective_user.id
        user_data = self.state_manager.get_user_data(user_id)
        
        cleaned_name = clean_company_name(text.strip())
        user_data.company_name = cleaned_name
        
        await update.message.reply_text(
            f"‚úÖ –ö–æ–º–ø–∞–Ω–∏—è: {cleaned_name}\
\
"
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
            parse_mode=None
        )
        
        self.state_manager.set_state(user_id, BotState.BUSINESS_REG_DATE)
    
    async def _handle_business_reg_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑–∞"""
        if not update.effective_user or not update.message:
            return
        user_id = update.effective_user.id
        user_data = self.state_manager.get_user_data(user_id)
        
        reg_date = validate_date(text.strip())
        if not reg_date:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì"
            )
            return
        
        if user_data:
            user_data.registration_date = reg_date
        
        await update.message.reply_text(
            f"‚úÖ –î–∞—Ç–∞: {reg_date.strftime('%d.%m.%Y')}\
\
"
            "üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
            parse_mode=None
        )
        
        self.state_manager.set_state(user_id, BotState.BUSINESS_REG_PLACE)
    
    async def _handle_business_reg_place(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑–∞"""
        if not update.effective_user or not update.message:
            return
        user_id = update.effective_user.id
        user_data = self.state_manager.get_user_data(user_id)
        
        user_data.registration_place = text.strip()
        
        await update.message.reply_text(
            f"‚úÖ –ú–µ—Å—Ç–æ: {text.strip()}\
\
"
            "üè≠ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏:",
            parse_mode=None,
            reply_markup=self.keyboards.get_business_spheres()
        )
        
        self.state_manager.set_state(user_id, BotState.BUSINESS_SPHERE)
    
    async def callback_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫"""
        if not update.callback_query or not update.effective_user:
            return
            
        query = update.callback_query
        user_id = update.effective_user.id
        callback_data = query.data
        
        await query.answer()  # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" —Å –∫–Ω–æ–ø–∫–∏
        
        logger.info(f"üîò –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: callback '{callback_data or 'Unknown'}'")
        
        if not callback_data:
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ñ–µ—Ä—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if callback_data.startswith("sphere_"):
            current_state = self.state_manager.get_state(user_id)
            if current_state == BotState.PROFILE_SPHERE:
                await self._handle_profile_sphere_selection(update, context, callback_data)
            else:
                await self._handle_sphere_selection(update, context, callback_data)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–æ–≤ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        elif callback_data.startswith("compat_"):
            # await self._handle_compatibility_type(update, context, callback_data)
            pass
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        elif callback_data.startswith("analysis_"):
            # await self._handle_analysis_type(update, context, callback_data)
            pass
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏—è–º–∏
        elif callback_data == "add_company":
            await self._start_add_company(update, context)
        
        elif callback_data.startswith("select_company_"):
            company_id = callback_data.replace("select_company_", "")
            await self._select_company(update, context, company_id)
        
        elif callback_data.startswith("edit_company_"):
            company_id = callback_data.replace("edit_company_", "")
            await self._edit_company(update, context, company_id)
        
        elif callback_data.startswith("delete_company_"):
            company_id = callback_data.replace("delete_company_", "")
            await self._delete_company(update, context, company_id)
        
        elif callback_data == "back_to_companies":
            await self._show_companies_menu(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π –∫–æ–º–ø–∞–Ω–∏–π
        elif callback_data == "save_company_profile":
            await self._save_company_profile(update, context)
        
        elif callback_data == "skip_save_company":
            await self._skip_save_company(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        elif callback_data == "back_to_main":
            await self._back_to_main_menu(update, context)
        
        elif callback_data == "skip_field":
            await self._skip_current_field(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Å—Ç—Ä–æ–ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∫–æ–º–ø–∞–Ω–∏–π
        elif callback_data == "company_zodiac":
            await self._handle_company_zodiac_analysis(update, context)
        
        elif callback_data == "company_forecast":
            await self._handle_company_business_forecast(update, context)
        
        elif callback_data == "company_compatibility":
            await self._handle_company_compatibility_analysis(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –¥–µ–π—Å—Ç–≤–∏—è–º —Å –∫–æ–º–ø–∞–Ω–∏–µ–π
        elif callback_data == "back_to_company_actions":
            await self._back_to_company_actions(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —á–∞—Å—Ç—è–º –¥–ª–∏–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        elif callback_data.startswith("next_part_"):
            part_index = int(callback_data.replace("next_part_", ""))
            await self._show_next_analysis_part(update, context)
        
        else:
            await query.edit_message_text(
                "ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=self.keyboards.get_back_inline_button()
            )
    
    async def _handle_sphere_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ñ–µ—Ä—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if not update.effective_user or not update.callback_query:
            return
        user_id = update.effective_user.id
        user_data = self.state_manager.get_user_data(user_id)
        
        sphere_map = {
            "sphere_construction": "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å",
            "sphere_finance": "–§–∏–Ω–∞–Ω—Å—ã –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏",
            "sphere_trade": "–¢–æ—Ä–≥–æ–≤–ª—è –∏ —Å—Ñ–µ—Ä–∞ —É—Å–ª—É–≥", 
            "sphere_tech": "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ —Ç–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏",
            "sphere_government": "–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ–∫—Ç–æ—Ä –∏ —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ñ–µ—Ä–∞",
            "sphere_energy": "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞"
        }
        
        selected_sphere = sphere_map.get(callback_data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        if user_data:
            user_data.business_sphere = selected_sphere
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
            f"‚úÖ –°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {selected_sphere}\
\
"
            "üë§ –¢–µ–ø–µ—Ä—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–µ.\
\
"
            "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
            parse_mode=None,
            reply_markup=self.keyboards.get_skip_optional()
        )
        
        self.state_manager.set_state(user_id, BotState.BUSINESS_OWNER_NAME)
    
    async def _skip_current_field(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–ø—É—Å–∫ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—è"""
        if not update.effective_user:
            return
        user_id = update.effective_user.id
        current_state = self.state_manager.get_state(user_id)
        
        if current_state == BotState.BUSINESS_OWNER_NAME:
            await self._ask_director_name(update, context)
        elif current_state == BotState.BUSINESS_OWNER_BIRTH:
            await self._ask_director_name(update, context)
        elif current_state == BotState.BUSINESS_DIRECTOR_NAME:
            await self._ask_director_birth(update, context, required=True)
        else:
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    "‚ùå –≠—Ç–æ –ø–æ–ª–µ –Ω–µ–ª—å–∑—è –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å."
                )
    
    async def _ask_director_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞"""
        if not update.effective_user:
            return
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
        if update.callback_query:
            await update.callback_query.edit_message_text(
                "üëî –í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
                parse_mode=None,
                reply_markup=self.keyboards.get_skip_optional()
            )
        else:
            if update.message:
                await update.message.reply_text(
                    "üëî –í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
                    parse_mode=None,
                    reply_markup=self.keyboards.get_skip_optional()
                )
        
        self.state_manager.set_state(user_id, BotState.BUSINESS_DIRECTOR_NAME)
    
    async def _ask_director_birth(self, update: Update, context: ContextTypes.DEFAULT_TYPE, required: bool = False):
        """–ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞"""
        if not update.effective_user:
            return
        user_id = update.effective_user.id
        
        if required:
            text = ("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\
"
                   "‚ö†Ô∏è –≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞.")
            markup = None
        else:
            text = ("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\
"
                   "(–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):")
            markup = self.keyboards.get_skip_optional()
        
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(
                text,
                parse_mode=None,
                reply_markup=markup
            )
        else:
            if update.message:
                await update.message.reply_text(
                    text,
                    parse_mode=None,
                    reply_markup=markup
                )
        
        self.state_manager.set_state(user_id, BotState.BUSINESS_DIRECTOR_BIRTH)
    
    async def _handle_business_owner_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–æ–º–ø–∞–Ω–∏–∏"""
        if not update.effective_user or not update.message:
            return
        user_id = update.effective_user.id
        user_data = self.state_manager.get_user_data(user_id)
        
        if user_data:
            user_data.owner_name = text.strip()
            logger.info(f"üë§ –í–ª–∞–¥–µ–ª–µ—Ü –∫–æ–º–ø–∞–Ω–∏–∏ {user_data.company_name}: {text}")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
        await update.message.reply_text(
            f"üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ {text} –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.1985",
            parse_mode=None,
            reply_markup=self.keyboards.get_skip_optional()
        )
        
        self.state_manager.set_state(user_id, BotState.BUSINESS_OWNER_BIRTH)
    
    async def _handle_business_owner_birth(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–æ–º–ø–∞–Ω–∏–∏"""
        if not update.effective_user or not update.message:
            return
        user_id = update.effective_user.id
        user_data = self.state_manager.get_user_data(user_id)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
        birth_date = validate_date(text.strip())
        if not birth_date:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.03.1985):",
                parse_mode=None
            )
            return
        
        if user_data:
            user_data.owner_birth_date = birth_date
            logger.info(f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞: {birth_date}")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –¥–∞–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
        await self._ask_director_name(update, context)
    
    async def _handle_business_director_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏"""
        if not update.effective_user or not update.message:
            return
        user_id = update.effective_user.id
        user_data = self.state_manager.get_user_data(user_id)
        
        if user_data:
            user_data.director_name = text.strip()
            logger.info(f"üëî –î–∏—Ä–µ–∫—Ç–æ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ {user_data.company_name}: {text}")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
        await update.message.reply_text(
            f"üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ {text} –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n–ù–∞–ø—Ä–∏–º–µ—Ä: 20.07.1980",
            parse_mode=None,
            reply_markup=self.keyboards.get_skip_optional()
            )
        
        self.state_manager.set_state(user_id, BotState.BUSINESS_DIRECTOR_BIRTH)
    
    async def _handle_business_director_birth(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑–∞"""
        if not update.effective_user or not update.message:
            return
        user_id = update.effective_user.id
        user_data = self.state_manager.get_user_data(user_id)
        
        birth_date = validate_date(text.strip())
        if not birth_date:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì"
            )
            return
        
        user_data.director_birth_date = birth_date
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        await update.message.reply_text(
            "üîÆ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ–ª–Ω—ã–π –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑...\
\
"
            "‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ...\
"
            "üì∞ –£—á–∏—Ç—ã–≤–∞—é —Ç–µ–∫—É—â–∏–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–Ω–¥—ã...",
            parse_mode=None
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
        try:
            company_data = user_data.get_company_data()
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            news_summary = ""
            astrology_data = ""
            
            if self.news_analyzer and user_data.business_sphere:
                news_analysis = await self.news_analyzer.analyze_news_for_company(
                    user_data.business_sphere
                )
                news_summary = news_analysis.get('summary', '')
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑
            if self.astro_agent:
                forecast = await self.astro_agent.generate_business_forecast(
                    company_data,
                    astrology_data,
                    news_summary
                )
            else:
                # –ó–∞–≥–ª—É—à–∫–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ AI
                forecast = self._generate_basic_forecast(user_data)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –Ω–∞ —á–∞—Å—Ç–∏
            await self._send_long_message(update, forecast, self.keyboards.get_detailed_analysis())
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î
            if self.embedding_manager:
                await self.embedding_manager.save_astro_prediction(
                    company_data,
                    forecast,
                    "business_forecast"
                )
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–ø–∞–Ω–∏—é –≤ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self._auto_save_company_profile(update, user_data)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
            await update.message.reply_text(
                "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=self.keyboards.get_main_menu()
            )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        self.state_manager.reset_user(user_id)
    
    def _generate_basic_forecast(self, user_data) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –±–µ–∑ AI"""
        from utils.helpers import get_zodiac_sign
        
        company_zodiac = get_zodiac_sign(user_data.registration_date)
        director_zodiac = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        
        if user_data.director_birth_date:
            director_zodiac = get_zodiac_sign(user_data.director_birth_date)
        
        # –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
        company_number = self.numerology.calculate_name_number(user_data.company_name) if user_data.company_name else 1
        company_meaning = self.numerology.get_number_meaning(company_number)
        
        forecast = f"""üåü –ü–û–õ–ù–´–ô –ë–ò–ó–ù–ï–°-–ü–†–û–ì–ù–û–ó
üè¢ –ö–æ–º–ø–∞–Ω–∏—è: "{user_data.company_name}"
üìÖ –ê–Ω–∞–ª–∏–∑ –Ω–∞: {datetime.now().strftime('%d.%m.%Y')}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üîÆ –ê–°–¢–†–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –ü–†–û–§–ò–õ–¨

‚≠ê –ó–Ω–∞–∫ –∫–æ–º–ø–∞–Ω–∏–∏: {company_zodiac}
üëî –ó–Ω–∞–∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è: {director_zodiac}  
üìã –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_data.registration_date.strftime('%d.%m.%Y')}
üåç –ú–µ—Å—Ç–æ: {user_data.registration_place or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üè≠ –°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {user_data.business_sphere or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üî¢ –ù–£–ú–ï–†–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –ü–†–û–§–ò–õ–¨

üéØ –ß–∏—Å–ª–æ –∏–º–µ–Ω–∏: {company_number}
‚ú® –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {company_meaning.get('traits', '–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ª–∏–¥–µ—Ä—Å—Ç–≤–∞ –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–π')}
üíº –ë–∏–∑–Ω–µ—Å-–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª: {company_meaning.get('business', '–í—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è –º–∞—Å—à—Ç–∞–±–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è')}
‚ö†Ô∏è –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏: {company_meaning.get('risks', '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ')}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìä –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò

üöÄ –†–∞–∑–≤–∏—Ç–∏–µ –±–∏–∑–Ω–µ—Å–∞:
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫—É —á–∏—Å–ª–∞ {company_number}
‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –ø—Ä–æ–µ–∫—Ç—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ü–∏–∫–ª–∞–º–∏ {company_zodiac}
‚Ä¢ –†–∞–∑–≤–∏–≤–∞–π—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞—à–∏–º –∑–Ω–∞–∫–æ–º

üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π:
‚Ä¢ –£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å {company_zodiac} –∏ {director_zodiac}
‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ–¥ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫—É –∫–æ–º–ø–∞–Ω–∏–∏
‚Ä¢ –†–∞–∑–≤–∏–≤–∞–π—Ç–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –∫—É–ª—å—Ç—É—Ä—É

üí° –ò–Ω–Ω–æ–≤–∞—Ü–∏–∏ –∏ —Ä–æ—Å—Ç:
‚Ä¢ –í–Ω–µ–¥—Ä—è–π—Ç–µ –Ω–æ–≤—à–µ—Å—Ç–≤–∞ –≤ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Ç—É–∏—Ü–∏—é —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
‚Ä¢ –†–∞–∑–≤–∏–≤–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚ö° –≠–ö–°–ü–†–ï–°–°-–ü–†–û–ì–ù–û–ó –ù–ê 3 –ú–ï–°–Ø–¶–ê

üå± –§–∏–Ω–∞–Ω—Å—ã: –°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º —É–≤–µ–ª–∏—á–µ–Ω–∏—è
ü§ù –ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞: –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –Ω–æ–≤—ã—Ö –∞–ª—å—è–Ω—Å–æ–≤
‚ö†Ô∏è –†–∏—Å–∫–∏: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏

üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è AI-–∞–Ω–∞–ª–∏–∑–∞ —Å —É—á–µ—Ç–æ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏."""
        
        return forecast
    
    async def _start_compatibility_check(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        if not update.message or not update.effective_user:
            return
        user_id = update.effective_user.id
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
        try:
            from database.crud import CompanyCRUD
            from database.connection import get_session
            
            with get_session() as session:
                user_companies = CompanyCRUD.get_companies_by_user(session, user_id)
                
                if user_companies:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞
                    companies_text = "ü§ù –í–´–ë–ï–†–ò–¢–ï –ö–û–ú–ü–ê–ù–ò–Æ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                    
                    for i, comp in enumerate(user_companies, 1):
                        reg_date_str = '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
                        if hasattr(comp, 'registration_date') and comp.registration_date is not None:
                            try:
                                reg_date_str = comp.registration_date.strftime('%d.%m.%Y')
                            except:
                                reg_date_str = '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
                        
                        companies_text += f"""üìä {i}. {comp.name}
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg_date_str}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"""
                    
                    companies_text += "\nüí° –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å."
                    
                    await update.message.reply_text(
                        companies_text,
                        parse_mode=None,
                        reply_markup=self.keyboards.get_companies_management_menu(user_companies)
                    )
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏
                    self.state_manager.set_state(user_id, BotState.SELECTING_COMPANY_FOR_COMPATIBILITY)
                    return
                    
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–∞–Ω–∏–π: {e}")
        
        # –ï—Å–ª–∏ –∫–æ–º–ø–∞–Ω–∏–π –Ω–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        await update.message.reply_text(
            """ü§ù –ê–ù–ê–õ–ò–ó –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò

–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–Ω–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –æ–±—ä–µ–∫—Ç–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.

üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–ø–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ –∏–ª–∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑.

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:""",
            parse_mode=None,
            reply_markup=self.keyboards.get_compatibility_types()
        )
    
    async def _show_daily_forecast_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""
        if not update.message:
            return
        await update.message.reply_text(
            """üìÖ –ï–ñ–ï–î–ù–ï–í–ù–´–ï –ü–†–û–ì–ù–û–ó–´

–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É—Ç—Ä–µ–Ω–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:""",
            parse_mode=None,
            reply_markup=self.keyboards.get_daily_forecast_settings()
        )
    
    async def _show_companies_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏—è–º–∏"""
        if not update.message or not update.effective_user:
            return
            
        user_id = update.effective_user.id
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –ë–î
        companies = []
        try:
            from database.connection import db_manager
            from database.crud import CompanyCRUD
            
            with db_manager.get_session() as session:
                user_companies = CompanyCRUD.get_companies_by_user(session, user_id)
                companies = []
                for comp in user_companies:
                    reg_date = getattr(comp, 'registration_date', None)
                    companies.append({
                        'id': getattr(comp, 'id', 0),
                        'name': str(getattr(comp, 'name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è')),
                        'registration_date': reg_date.strftime('%d.%m.%Y') if reg_date else '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
                        'sphere': str(getattr(comp, 'business_sphere', None) or '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
                    })
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–∞–Ω–∏–π: {e}")
        
        if companies:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            companies_text = "üè¢ –í–ê–®–ò –ö–û–ú–ü–ê–ù–ò–ò\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            
            for i, comp in enumerate(companies, 1):
                companies_text += f"""üìä {i}. {comp['name']}
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {comp['registration_date']}
üè≠ –°—Ñ–µ—Ä–∞: {comp['sphere']}

"""
            
            companies_text += """üìã –î–û–°–¢–£–ü–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:
‚Ä¢ –í—ã–±—Ä–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
‚Ä¢ –£–¥–∞–ª–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
            
            await update.message.reply_text(
                companies_text,
                parse_mode=None,
                reply_markup=self.keyboards.get_companies_management_menu(companies)
            )
        else:
            await update.message.reply_text(
                """üè¢ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ú–ü–ê–ù–ò–Ø–ú–ò
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π.

üí° –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –∫–æ–º–ø–∞–Ω–∏–π
‚úÖ –ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –¥–ª—è –ª—é–±—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤
‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π
‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–æ–º–ø–∞–Ω–∏—è–º–∏

üöÄ –°–û–ó–î–ê–¢–¨ –ü–ï–†–í–£–Æ –ö–û–ú–ü–ê–ù–ò–Æ:
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª—é–±–æ–π –∞–Ω–∞–ª–∏–∑ (–∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –∏–ª–∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑), –∏ —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–ø–∞–Ω–∏–∏.

‚ûï –ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–ø–∞–Ω–∏–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:""",
                parse_mode=None,
                reply_markup=self.keyboards.get_add_company_menu()
            )
    
    async def _show_settings_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        settings_text = """
‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –ê–°–¢–†–û–ë–û–¢–ê

üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–∫–ª—é—á–µ–Ω—ã
‚è∞ –í—Ä–µ–º—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: 08:00
üè¢ –ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è: –ù–µ –≤—ã–±—Ä–∞–Ω–∞
üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: 0

–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ä–∞–∑–¥–µ–ª—ã –º–µ–Ω—é.
        """
        
        if update.message:
            await update.message.reply_text(
                settings_text,
                parse_mode=None,
                reply_markup=self.keyboards.get_back_button()
            )
    
    async def _back_to_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        if not update.effective_user or not update.callback_query:
            return
        user_id = update.effective_user.id
        
        await update.callback_query.edit_message_text(
            "üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ê—Å—Ç—Ä–æ–±–æ—Ç–∞\
\
"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode=None,
            reply_markup=self.keyboards.get_back_inline_button()
        )
        
        self.state_manager.reset_user(user_id)
    
    async def _show_personal_cabinet(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not update.effective_user:
            return
            
        user = update.effective_user
        user_id = user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            from database.connection import db_manager
            from database.crud import UserCRUD
            
            with db_manager.get_session() as session:
                db_user = UserCRUD.get_user_by_telegram_id(session, user_id)
                
                if db_user:
                    analyses_count = len(db_user.analyses) if hasattr(db_user, 'analyses') else 0
                    registration_date = db_user.created_at.strftime('%d.%m.%Y') if hasattr(db_user, 'created_at') else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                else:
                    analyses_count = 0
                    registration_date = "–°–µ–≥–æ–¥–Ω—è"
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            analyses_count = 0
            registration_date = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        cabinet_text = f"""üë§ –õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!

üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:
üîÆ –ü—Ä–æ–≤–µ–¥–µ–Ω–æ –∞–Ω–∞–ª–∏–∑–æ–≤: {analyses_count}
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_date}
üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìà –î–û–°–¢–£–ü–ù–´–ï –§–£–ù–ö–¶–ò–ò:

üîÆ –ê–Ω–∞–ª–∏–∑ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π
üìä –ë–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏  
ü§ù –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã
üè¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏—è–º–∏
üî¢ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üíé –ü–†–ï–ú–ò–£–ú –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
‚ú® –î–µ—Ç–∞–ª—å–Ω—ã–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç—ã
üì∞ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –Ω–æ–≤–æ—Å—Ç–Ω—ã–º–∏ —Ç—Ä–µ–Ω–¥–∞–º–∏
üß† –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

üîô –ù–∞–∑–∞–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é"""

        if update.message:
            await update.message.reply_text(
                cabinet_text,
                parse_mode=None,
                reply_markup=self.keyboards.get_back_button()
            )
    
    async def _show_tariffs_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤"""
        tariffs_text = """üí≥ –¢–ê–†–ò–§–ù–´–ï –ü–õ–ê–ù–´ –ê–°–¢–†–û–ë–û–¢–ê
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üÜì –ë–ê–ó–û–í–´–ô (–¢–ï–ö–£–©–ò–ô)
‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏
‚úÖ –ë–∞–∑–æ–≤—ã–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏  
‚úÖ –ü—Ä–æ—Å—Ç—ã–µ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã
‚úÖ –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é
‚≠ê –¶–µ–Ω–∞: –ë–µ—Å–ø–ª–∞—Ç–Ω–æ

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üíé –ü–†–ï–ú–ò–£–ú
‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ë–∞–∑–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã —á–µ—Ä–µ–∑ AI
‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏
‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑—ã
‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤
‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚≠ê –¶–µ–Ω–∞: 990‚ÇΩ/–º–µ—Å—è—Ü

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üöÄ –ö–û–†–ü–û–†–ê–¢–ò–í–ù–´–ô  
‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ü—Ä–µ–º–∏—É–º —Ç–∞—Ä–∏—Ñ–∞
‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã –∫–æ–º–ø–∞–Ω–∏–π
‚úÖ API –¥–æ—Å—Ç—É–ø –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
‚úÖ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
‚úÖ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
‚≠ê –¶–µ–Ω–∞: 4990‚ÇΩ/–º–µ—Å—è—Ü

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üí∞ –°–ü–ï–¶–ò–ê–õ–¨–ù–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï:
üéØ –ü–µ—Ä–≤—ã–π –º–µ—Å—è—Ü –ü—Ä–µ–º–∏—É–º - 99‚ÇΩ
üéÅ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ç–∞—Ä–∏—Ñ - —Å–∫–∏–¥–∫–∞ 20% –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –∑–∞ –≥–æ–¥

üìû –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–ª–∞—Ç–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @astrobot_support

üîô –ù–∞–∑–∞–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é"""

        if update.message:
            await update.message.reply_text(
                tariffs_text,
                parse_mode=None,
                reply_markup=self.keyboards.get_back_button()
            )
    
    async def _start_add_company(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∫–æ–º–ø–∞–Ω–∏–∏"""
        if not update.callback_query or not update.effective_user:
            return
            
        user_id = update.effective_user.id
        
        await update.callback_query.edit_message_text(
            """‚ú® –°–û–ó–î–ê–ù–ò–ï –ü–†–û–§–ò–õ–Ø –ö–û–ú–ü–ê–ù–ò–ò ‚ú®
‚≠êÔ∏è ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ ‚≠êÔ∏è

üìù –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:

üí° –≠—Ç–æ—Ç –ø—Ä–æ—Ñ–∏–ª—å –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ –≤ –ª—é–±—ã—Ö –∞–Ω–∞–ª–∏–∑–∞—Ö.""",
            parse_mode=None,
            reply_markup=self.keyboards.get_back_inline_button()
        )
        
        self.state_manager.set_state(user_id, BotState.PROFILE_COMPANY_NAME)
        self.state_manager.get_user_data(user_id).reset()
    
    async def _select_company(self, update: Update, context: ContextTypes.DEFAULT_TYPE, company_id: str):
        """–í—ã–±–æ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã"""
        if not update.callback_query or not update.effective_user:
            return
            
        user_id = update.effective_user.id
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
        try:
            from database.connection import db_manager
            from database.crud import CompanyCRUD
            
            with db_manager.get_session() as session:
                company = CompanyCRUD.get_company_by_id(session, int(company_id))
                
                if company and getattr(company, 'owner_id', 0) == user_id:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
                    user_data = self.state_manager.get_user_data(user_id)
                    user_data.company_name = str(getattr(company, 'name', ''))
                    user_data.registration_date = getattr(company, 'registration_date', None)
                    user_data.registration_place = str(getattr(company, 'registration_place', '') or '')
                    user_data.business_sphere = str(getattr(company, 'business_sphere', '') or '')
                    user_data.owner_name = str(getattr(company, 'owner_name', '') or '')
                    user_data.owner_birth_date = getattr(company, 'owner_birth_date', None)
                    user_data.director_name = str(getattr(company, 'director_name', '') or '')
                    user_data.director_birth_date = getattr(company, 'director_birth_date', None)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ context.user_data –¥–ª—è –∞—Å—Ç—Ä–æ–ø—Ä–æ–≥–Ω–æ–∑–æ–≤
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º update() –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è
                    company_data_dict = {
                        'id': getattr(company, 'id', 0),
                        'name': str(getattr(company, 'name', '')),
                        'registration_date': getattr(company, 'registration_date', None),
                        'registration_place': str(getattr(company, 'registration_place', '') or ''),
                        'business_sphere': str(getattr(company, 'business_sphere', '') or ''),
                        'owner_name': str(getattr(company, 'owner_name', '') or ''),
                        'owner_birth_date': getattr(company, 'owner_birth_date', None),
                        'director_name': str(getattr(company, 'director_name', '') or ''),
                        'director_birth_date': getattr(company, 'director_birth_date', None)
                    }
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ context.user_data —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    if context.user_data is not None:
                        context.user_data.update({'selected_company': company_data_dict})
                    else:
                        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—É, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
                        logger.warning("‚ö†Ô∏è context.user_data is None, –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
                    
                    reg_date = getattr(company, 'registration_date', None)
                    company_info = f"""üè¢ –í–´–ë–†–ê–ù–ê –ö–û–ú–ü–ê–ù–ò–Ø: {str(getattr(company, 'name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è'))}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìã –ü–†–û–§–ò–õ–¨ –ö–û–ú–ü–ê–ù–ò–ò:
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg_date.strftime('%d.%m.%Y') if reg_date else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
üåç –ú–µ—Å—Ç–æ: {str(getattr(company, 'registration_place', '') or '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üè≠ –°—Ñ–µ—Ä–∞: {str(getattr(company, 'business_sphere', '') or '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}

üë• –†–£–ö–û–í–û–î–°–¢–í–û:
üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {str(getattr(company, 'owner_name', '') or '–ù–µ —É–∫–∞–∑–∞–Ω')}
üëî –î–∏—Ä–µ–∫—Ç–æ—Ä: {str(getattr(company, 'director_name', '') or '–ù–µ —É–∫–∞–∑–∞–Ω')}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
                    
                    await update.callback_query.edit_message_text(
                        company_info,
                        parse_mode=None,
                        reply_markup=self.keyboards.get_company_actions_menu()
                    )
                    
                    logger.info(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –∫–æ–º–ø–∞–Ω–∏—é: {company.name}")
                else:
                    await update.callback_query.edit_message_text(
                        "‚ùå –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.",
                        reply_markup=self.keyboards.get_back_inline_button()
                    )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
            await update.callback_query.edit_message_text(
                "üòî –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏.",
                reply_markup=self.keyboards.get_back_inline_button()
            )
    
    async def _edit_company(self, update: Update, context: ContextTypes.DEFAULT_TYPE, company_id: str):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏"""
        if not update.callback_query:
            return
            
        await update.callback_query.edit_message_text(
            """‚úèÔ∏è –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ü–ê–ù–ò–ò
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.

–í —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö –≤—ã —Å–º–æ–∂–µ—Ç–µ:
‚Ä¢ –ò–∑–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
‚Ä¢ –û–±–Ω–æ–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–µ
‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

üîô –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.""",
            parse_mode=None,
            reply_markup=self.keyboards.get_back_inline_button()
        )
    
    async def _delete_company(self, update: Update, context: ContextTypes.DEFAULT_TYPE, company_id: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏"""
        if not update.callback_query:
            return
            
        await update.callback_query.edit_message_text(
            """üóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï –ö–û–ú–ü–ê–ù–ò–ò
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.

–í —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö –≤—ã —Å–º–æ–∂–µ—Ç–µ:
‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏ –∫–æ–º–ø–∞–Ω–∏–π
‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ
‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ —É–¥–∞–ª–µ–Ω–Ω—ã–µ

üîô –ü–æ–∫–∞ –ø—Ä–æ—Ñ–∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.""",
            parse_mode=None,
            reply_markup=self.keyboards.get_back_inline_button()
        )
    
    async def _offer_save_company_profile(self, update: Update, user_data, analysis_result: str):
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–ø–∞–Ω–∏–∏"""
        if not update.message or not user_data.company_name:
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        if not update.effective_user:
            return
        user_id = update.effective_user.id
        context_data = {
            'company_name': user_data.company_name,
            'registration_date': user_data.registration_date.isoformat() if user_data.registration_date else None,
            'registration_place': user_data.registration_place,
            'business_sphere': getattr(user_data, 'business_sphere', None),
            'owner_name': getattr(user_data, 'owner_name', None),
            'owner_birth_date': user_data.owner_birth_date.isoformat() if getattr(user_data, 'owner_birth_date', None) else None,
            'director_name': getattr(user_data, 'director_name', None),
            'director_birth_date': user_data.director_birth_date.isoformat() if getattr(user_data, 'director_birth_date', None) else None
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        temp_user_data = self.state_manager.get_user_data(user_id)
        temp_user_data.temp_company_data = context_data
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ –∫–æ–º–ø–∞–Ω–∏—è
        try:
            from database.connection import db_manager
            from database.crud import CompanyCRUD
            
            with db_manager.get_session() as session:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π
                if not update.effective_user:
                    return
                user_companies = CompanyCRUD.get_companies_by_user(session, update.effective_user.id)
                existing_company = None
                for comp in user_companies:
                    comp_name = str(getattr(comp, 'name', ''))
                    if comp_name.lower() == user_data.company_name.lower():
                        existing_company = comp
                        break
                
                if existing_company:
                    # –ö–æ–º–ø–∞–Ω–∏—è —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                    return
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é
        save_offer_text = f"""üíæ –°–û–•–†–ê–ù–ò–¢–¨ –í "–ú–û–ò –ö–û–ú–ü–ê–ù–ò–ò"?
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {user_data.company_name}
üìÖ –î–∞—Ç–∞: {user_data.registration_date.strftime('%d.%m.%Y') if user_data.registration_date else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
üåç –ú–µ—Å—Ç–æ: {user_data.registration_place or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üí° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø:
‚úÖ –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –∫–æ–º–ø–∞–Ω–∏–∏
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–∞—Ö
‚úÖ –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤
‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤

–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–ø–∞–Ω–∏–∏?"""

        # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data=f"save_company_profile")],
            [InlineKeyboardButton("‚ùå –ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å", callback_data="skip_save_company")],
            [InlineKeyboardButton("üîô –ö –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é", callback_data="back_to_main")]
        ])
        
        await update.message.reply_text(
            save_offer_text,
            parse_mode=None,
            reply_markup=keyboard
        )
    
    async def _save_company_profile(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∫–æ–º–ø–∞–Ω–∏–∏"""
        if not update.callback_query or not update.effective_user:
            return
            
        user_id = update.effective_user.id
        user_data = self.state_manager.get_user_data(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
        temp_data = getattr(user_data, 'temp_company_data', None)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logger.info(f"üîç –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: temp_data={temp_data is not None}")
        
        if not temp_data:
            await update.callback_query.edit_message_text(
                "‚ùå –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=self.keyboards.get_back_inline_button()
            )
            return
        
        try:
            from database.connection import db_manager
            from database.crud import CompanyCRUD
            from datetime import datetime
            
            with db_manager.get_session() as session:
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                company_name = temp_data.get('company_name')
                reg_date_str = temp_data.get('registration_date')
                
                if not company_name or not reg_date_str:
                    raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏")
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –æ–±—Ä–∞—Ç–Ω–æ
                registration_date = datetime.fromisoformat(reg_date_str)
                owner_birth_date = None
                director_birth_date = None
                
                if temp_data.get('owner_birth_date'):
                    owner_birth_date = datetime.fromisoformat(temp_data['owner_birth_date'])
                if temp_data.get('director_birth_date'):
                    director_birth_date = datetime.fromisoformat(temp_data['director_birth_date'])
                
                saved_company = CompanyCRUD.create_company(
                    session=session,
                    owner_id=user_id,
                    name=company_name,
                    registration_date=registration_date,
                    registration_place=temp_data.get('registration_place') or "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                    industry=temp_data.get('business_sphere'),
                    owner_name=temp_data.get('owner_name'),
                    owner_birth_date=owner_birth_date,
                    director_name=temp_data.get('director_name'),
                    director_birth_date=director_birth_date
                )
                
                await update.callback_query.edit_message_text(
                    f"""‚úÖ –ü–†–û–§–ò–õ–¨ –°–û–•–†–ê–ù–ï–ù
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üè¢ –ö–æ–º–ø–∞–Ω–∏—è "{company_name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ "–ú–æ–∏ –∫–æ–º–ø–∞–Ω–∏–∏"!

üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ë—ã—Å—Ç—Ä–æ –≤—ã–±–∏—Ä–∞—Ç—å —ç—Ç—É –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–æ–≤
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∞–Ω–∞–ª–∏–∑–æ–≤

üîÆ –î–ª—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é –≤ —Ä–∞–∑–¥–µ–ª–µ "üè¢ –ú–æ–∏ –∫–æ–º–ø–∞–Ω–∏–∏".""",
                    parse_mode=None,
                    reply_markup=self.keyboards.get_back_inline_button()
                )
                
                logger.info(f"üíæ –ü—Ä–æ—Ñ–∏–ª—å –∫–æ–º–ø–∞–Ω–∏–∏ {company_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                user_data.temp_company_data = None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
            await update.callback_query.edit_message_text(
                "üòî –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∫–æ–º–ø–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=self.keyboards.get_back_inline_button()
            )
    
    async def _skip_save_company(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–ø—É—Å–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∫–æ–º–ø–∞–Ω–∏–∏"""
        if not update.callback_query:
            return
            
        await update.callback_query.edit_message_text(
            """‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìä –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–∞–Ω–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!

üí° –ü—Ä–æ—Ñ–∏–ª—å –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª "üè¢ –ú–æ–∏ –∫–æ–º–ø–∞–Ω–∏–∏".

üîÆ –î–ª—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.""",
            parse_mode=None,
            reply_markup=self.keyboards.get_back_inline_button()
        )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∫–æ–º–ø–∞–Ω–∏–∏
    async def _handle_profile_company_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è"""
        if not update.effective_user or not update.message:
            return
        user_id = update.effective_user.id
        user_data = self.state_manager.get_user_data(user_id)
        
        cleaned_name = clean_company_name(text.strip())
        user_data.company_name = cleaned_name
        
        await update.message.reply_text(
            f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {cleaned_name}\n\nüìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
            parse_mode=None
        )
        
        self.state_manager.set_state(user_id, BotState.PROFILE_REG_DATE)
    
    async def _handle_profile_reg_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è"""
        if not update.effective_user or not update.message:
            return
        user_id = update.effective_user.id
        user_data = self.state_manager.get_user_data(user_id)
        
        reg_date = validate_date(text.strip())
        if not reg_date:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì"
            )
            return
        
        user_data.registration_date = reg_date
        
        await update.message.reply_text(
            f"‚úÖ –î–∞—Ç–∞: {reg_date.strftime('%d.%m.%Y')}\n\nüèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
            parse_mode=None
        )
        
        self.state_manager.set_state(user_id, BotState.PROFILE_REG_PLACE)
    
    async def _handle_profile_reg_place(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è"""
        if not update.effective_user or not update.message:
            return
        user_id = update.effective_user.id
        user_data = self.state_manager.get_user_data(user_id)
        
        user_data.registration_place = text.strip()
        
        await update.message.reply_text(
            f"‚úÖ –ú–µ—Å—Ç–æ: {text.strip()}\n\nüè≠ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:",
            parse_mode=None,
            reply_markup=self.keyboards.get_business_spheres()
        )
        
        self.state_manager.set_state(user_id, BotState.PROFILE_SPHERE)
    
    async def _save_company_profile_direct(self, update: Update, user_data):
        """–ü—Ä—è–º–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∫–æ–º–ø–∞–Ω–∏–∏"""
        if not update.effective_user or not update.message:
            return
            
        user_id = update.effective_user.id
        
        try:
            from database.connection import db_manager
            from database.crud import CompanyCRUD
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            if not user_data.company_name or not user_data.registration_date:
                await update.message.reply_text(
                    "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –ù–µ–æ–±—Ö–æ–¥–∏–º—ã –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –¥–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                    reply_markup=self.keyboards.get_main_menu()
                )
                return
            
            with db_manager.get_session() as session:
                saved_company = CompanyCRUD.create_company(
                    session=session,
                    owner_id=user_id,
                    name=user_data.company_name,
                    registration_date=user_data.registration_date,
                    registration_place=user_data.registration_place or "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                    industry=user_data.business_sphere,
                    owner_name=user_data.owner_name,
                    owner_birth_date=user_data.owner_birth_date,
                    director_name=user_data.director_name,
                    director_birth_date=user_data.director_birth_date
                )
                
                await update.message.reply_text(
                    f"""‚úÖ –ü–†–û–§–ò–õ–¨ –ö–û–ú–ü–ê–ù–ò–ò –°–û–ó–î–ê–ù
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üè¢ –ö–æ–º–ø–∞–Ω–∏—è "{user_data.company_name}" —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!

üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:
üîÆ –ë—ã—Å—Ç—Ä–æ –≤—ã–±–∏—Ä–∞—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–æ–≤
üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ  
üìà –ü–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã

üîô –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–æ–≤.""",
                    parse_mode=None,
                    reply_markup=self.keyboards.get_main_menu()
                )
                
                logger.info(f"üíæ –ü—Ä–æ—Ñ–∏–ª—å –∫–æ–º–ø–∞–Ω–∏–∏ {user_data.company_name} —Å–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            await update.message.reply_text(
                "üòî –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∫–æ–º–ø–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=self.keyboards.get_main_menu()
            )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.state_manager.reset_user(user_id)
    
    async def _handle_profile_sphere_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ñ–µ—Ä—ã –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –∫–æ–º–ø–∞–Ω–∏–∏"""
        if not update.effective_user or not update.callback_query:
            return
        user_id = update.effective_user.id
        user_data = self.state_manager.get_user_data(user_id)
        
        sphere_map = {
            "sphere_construction": "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å",
            "sphere_finance": "–§–∏–Ω–∞–Ω—Å—ã –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏",
            "sphere_trade": "–¢–æ—Ä–≥–æ–≤–ª—è –∏ —Å—Ñ–µ—Ä–∞ —É—Å–ª—É–≥", 
            "sphere_tech": "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ —Ç–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏",
            "sphere_government": "–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ–∫—Ç–æ—Ä –∏ —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ñ–µ—Ä–∞",
            "sphere_energy": "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞"
        }
        
        selected_sphere = sphere_map.get(callback_data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        user_data.business_sphere = selected_sphere
        
        await update.callback_query.edit_message_text(
            f"""‚úÖ –°—Ñ–µ—Ä–∞: {selected_sphere}

üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏:

üí° –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–º–æ–≥—É—Ç —Å–æ–∑–¥–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã.""",
            parse_mode=None,
            reply_markup=self.keyboards.get_skip_optional()
        )
        
        self.state_manager.set_state(user_id, BotState.PROFILE_OWNER_NAME)
    
    async def _handle_profile_owner_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è"""
        if not update.effective_user or not update.message:
            return
        user_id = update.effective_user.id
        user_data = self.state_manager.get_user_data(user_id)
        
        user_data.owner_name = text.strip()
        
        await update.message.reply_text(
            f"‚úÖ –í–ª–∞–¥–µ–ª–µ—Ü: {text}\n\nüìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
            parse_mode=None,
            reply_markup=self.keyboards.get_skip_optional()
        )
        
        self.state_manager.set_state(user_id, BotState.PROFILE_OWNER_BIRTH)
    
    async def _handle_profile_owner_birth(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è"""
        if not update.effective_user or not update.message:
            return
        user_id = update.effective_user.id
        user_data = self.state_manager.get_user_data(user_id)
        
        birth_date = validate_date(text.strip())
        if not birth_date:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì"
            )
            return
        
        user_data.owner_birth_date = birth_date
        
        await update.message.reply_text(
            "‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞\n\nüëî –í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏:",
            parse_mode=None,
            reply_markup=self.keyboards.get_skip_optional()
        )
        
        self.state_manager.set_state(user_id, BotState.PROFILE_DIRECTOR_NAME)
    
    async def _handle_profile_director_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è"""
        if not update.effective_user or not update.message:
            return
        user_id = update.effective_user.id
        user_data = self.state_manager.get_user_data(user_id)
        
        user_data.director_name = text.strip()
        
        await update.message.reply_text(
            f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä: {text}\n\nüìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
            parse_mode=None,
            reply_markup=self.keyboards.get_skip_optional()
        )
        
        self.state_manager.set_state(user_id, BotState.PROFILE_DIRECTOR_BIRTH)
    
    async def _handle_profile_director_birth(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
        if not update.effective_user or not update.message:
            return
        user_id = update.effective_user.id
        user_data = self.state_manager.get_user_data(user_id)
        
        birth_date = validate_date(text.strip())
        if not birth_date:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì"
            )
            return
        
        user_data.director_birth_date = birth_date
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–ø–∞–Ω–∏–∏
        await self._save_company_profile_direct(update, user_data)

    async def _auto_save_company_profile(self, update: Update, user_data):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not update.effective_user or not update.message:
            return
            
        user_id = update.effective_user.id
        
        try:
            from database.connection import db_manager
            from database.crud import CompanyCRUD
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            with db_manager.get_session() as session:
                existing_companies = CompanyCRUD.get_companies_by_user(session, user_id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –¥–∞—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                company_exists = False
                for company in existing_companies:
                    if (company.name == user_data.company_name and 
                        company.registration_date == user_data.registration_date):
                        company_exists = True
                        break
                
                if not company_exists and user_data.company_name and user_data.registration_date:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é
                    saved_company = CompanyCRUD.create_company(
                        session=session,
                        owner_id=user_id,
                        name=user_data.company_name,
                        registration_date=user_data.registration_date,
                        registration_place=user_data.registration_place or "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                        industry=user_data.business_sphere,
                        owner_name=user_data.owner_name,
                        owner_birth_date=user_data.owner_birth_date,
                        director_name=user_data.director_name,
                        director_birth_date=user_data.director_birth_date
                    )
                    
                    logger.info(f"üíæ –ö–æ–º–ø–∞–Ω–∏—è {user_data.company_name} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await update.message.reply_text(
                        f"üíæ –ö–æ–º–ø–∞–Ω–∏—è <b>{user_data.company_name}</b> –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å!",
                        parse_mode='HTML',
                        reply_markup=self.keyboards.get_main_menu()
                    )
                else:
                    logger.info(f"üíæ –ö–æ–º–ø–∞–Ω–∏—è {user_data.company_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
            # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª

    def _clean_html_tags(self, text: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ HTML-—Ç–µ–≥–æ–≤ –∏ –∑–∞–º–µ–Ω–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Telegram"""
        import re
        
        # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ HTML-—Ç–µ–≥–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω—É–∂–Ω—ã–µ –¥–ª—è Telegram
        text = re.sub(r'<p>(.*?)</p>', r'\1', text, flags=re.DOTALL)    # –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
        text = re.sub(r'<h[1-6]>(.*?)</h[1-6]>', r'<b>\1</b>', text, flags=re.DOTALL)  # h1-h6 ‚Üí –∂–∏—Ä–Ω—ã–π
        text = re.sub(r'<strong>(.*?)</strong>', r'<b>\1</b>', text, flags=re.DOTALL)  # strong ‚Üí –∂–∏—Ä–Ω—ã–π
        text = re.sub(r'<em>(.*?)</em>', r'<i>\1</i>', text, flags=re.DOTALL)  # em ‚Üí –∫—É—Ä—Å–∏–≤
        # –û—Å—Ç–∞–≤–ª—è–µ–º <b> –∏ <i> –¥–ª—è Telegram
        text = re.sub(r'<ul>', '', text)               # –£–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–∫–∏
        text = re.sub(r'</ul>', '', text)
        text = re.sub(r'<ol>', '', text)               # –£–±–∏—Ä–∞–µ–º –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
        text = re.sub(r'</ol>', '', text)
        text = re.sub(r'<li>', '‚Ä¢ ', text)             # –ó–∞–º–µ–Ω—è–µ–º li –Ω–∞ —ç–º–æ–¥–∑–∏
        text = re.sub(r'</li>', '', text)
        text = re.sub(r'<hr>', '\n', text)             # –ó–∞–º–µ–Ω—è–µ–º hr –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å
        text = re.sub(r'<hr/>', '\n', text)
        text = re.sub(r'<br>', '\n', text)             # –ó–∞–º–µ–Ω—è–µ–º br –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å
        text = re.sub(r'<br/>', '\n', text)
        text = re.sub(r'<div>(.*?)</div>', r'\1', text, flags=re.DOTALL)  # –£–±–∏—Ä–∞–µ–º div
        
        # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–Ω—É–∂–Ω—ã–µ —Ç–µ–≥–∏ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º <b> –∏ <i> –¥–ª—è Telegram)
        text = re.sub(r'<(?!/?[bi]>)[^>]+>', '', text)
        
        # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã # –∏ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ —ç–º–æ–¥–∑–∏
        text = re.sub(r'^#{1,6}\s*(.+)$', r'üåü \1', text, flags=re.MULTILINE)
        text = re.sub(r'###\s*(.+)', r'üíé \1', text)
        text = re.sub(r'##\s*(.+)', r'üöÄ \1', text)
        text = re.sub(r'#\s*(.+)', r'‚≠ê \1', text)
        
        # –£–±–∏—Ä–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
        text = re.sub(r'^---+$', '', text, flags=re.MULTILINE)
        text = re.sub(r'^===+$', '', text, flags=re.MULTILINE)
        
        # –ó–∞–º–µ–Ω—è–µ–º –±—É–ª–ª–µ—Ç—ã –Ω–∞ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∏–∫–æ–Ω–∫–∏
        text = re.sub(r'^\s*\*\s+', '‚≠ê ', text, flags=re.MULTILINE)     # * –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ ‚≠ê
        text = re.sub(r'^\s*-\s+', 'üí´ ', text, flags=re.MULTILINE)      # - –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ üí´
        text = re.sub(r'^\s*‚Ä¢\s+', 'üéØ ', text, flags=re.MULTILINE)      # ‚Ä¢ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ üéØ
        
        # –î–µ–ª–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∂–∏—Ä–Ω—ã–º–∏ (—Å—Ç—Ä–æ–∫–∏ —Å —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ)
        text = re.sub(r'^(üåü.*?)$', r'<b>\1</b>', text, flags=re.MULTILINE)  # üåü –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∂–∏—Ä–Ω—ã–º
        text = re.sub(r'^(üíé.*?)$', r'<b>\1</b>', text, flags=re.MULTILINE)  # üíé –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∂–∏—Ä–Ω—ã–º
        text = re.sub(r'^(üöÄ.*?)$', r'<b>\1</b>', text, flags=re.MULTILINE)  # üöÄ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∂–∏—Ä–Ω—ã–º
        text = re.sub(r'^(‚ö†Ô∏è.*?)$', r'<b>\1</b>', text, flags=re.MULTILINE)  # ‚ö†Ô∏è –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∂–∏—Ä–Ω—ã–º
        text = re.sub(r'^(üí∞.*?)$', r'<b>\1</b>', text, flags=re.MULTILINE)  # üí∞ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∂–∏—Ä–Ω—ã–º
        text = re.sub(r'^(ü§ù.*?)$', r'<b>\1</b>', text, flags=re.MULTILINE)  # ü§ù –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∂–∏—Ä–Ω—ã–º
        text = re.sub(r'^(üíº.*?)$', r'<b>\1</b>', text, flags=re.MULTILINE)  # üíº –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∂–∏—Ä–Ω—ã–º
        text = re.sub(r'^(‚ú®.*?)$', r'<b>\1</b>', text, flags=re.MULTILINE)  # ‚ú® –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∂–∏—Ä–Ω—ã–º
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Å–º—ã—Å–ª–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        text = re.sub(r'(üåü.*?)(\n(?=[üåüüíéüöÄ‚ö†Ô∏èüìàüîÆüíºüéØüí°‚ú®]))', r'\1\n\n\2', text)  # –ü–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å —ç–º–æ–¥–∑–∏
        text = re.sub(r'(\.\s*)(\nüåü)', r'\1\n\2', text)  # –ü–æ—Å–ª–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        text = re.sub(r'(\.\s*)(\nüíé)', r'\1\n\2', text)  # –ü–æ—Å–ª–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –±–ª–æ–∫–∞–º–∏
        text = re.sub(r'(\.\s*)(\nüöÄ)', r'\1\n\2', text)  # –ü–æ—Å–ª–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –±–ª–æ–∫–∞–º–∏
        text = re.sub(r'(\.\s*)(\n‚ö†Ô∏è)', r'\1\n\2', text)  # –ü–æ—Å–ª–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –±–ª–æ–∫–∞–º–∏
        text = re.sub(r'(\.\s*)(\nüìà)', r'\1\n\2', text)  # –ü–æ—Å–ª–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –±–ª–æ–∫–∞–º–∏
        text = re.sub(r'(\.\s*)(\nüîÆ)', r'\1\n\2', text)  # –ü–æ—Å–ª–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –±–ª–æ–∫–∞–º–∏
        text = re.sub(r'(\.\s*)(\nüíº)', r'\1\n\2', text)  # –ü–æ—Å–ª–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –±–ª–æ–∫–∞–º–∏
        
        # –û—á–∏—â–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
        text = re.sub(r'\n\s*\n\s*\n+', '\n\n', text)  # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã
        text = re.sub(r'^\s+', '', text, flags=re.MULTILINE)  # –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫
        text = re.sub(r'\s+$', '', text, flags=re.MULTILINE)  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫
        
        return text.strip()

    async def _auto_save_analysis(self, user_id: int, company_data: dict, analysis_type: str, analysis_result: str):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –≤ Qdrant –∏ –ë–î"""
        saved_to_qdrant = False
        saved_to_db = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ analysis_type –Ω–µ None
        if not analysis_type:
            analysis_type = "unknown"
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Qdrant
        if self.qdrant_client and company_data:
            try:
                await self.qdrant_client.save_astro_result(
                    user_id=user_id,
                    company_name=company_data.get('name', ''),
                    analysis_type=analysis_type,
                    result=analysis_result
                )
                saved_to_qdrant = True
                logger.info(f"üíæ –ê–Ω–∞–ª–∏–∑ {analysis_type} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Qdrant –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Qdrant: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            from database.connection import db_manager
            from database.crud import AnalysisCRUD, UserCRUD
            
            with db_manager.get_session() as session:
                user_db = UserCRUD.get_user_by_telegram_id(session, user_id)
                if user_db and company_data:
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –∞–Ω–∞–ª–∏–∑–∞
                    db_user_id = getattr(user_db, 'id', 0)
                    AnalysisCRUD.create_analysis(
                        session=session,
                        user_id=int(db_user_id),
                        analysis_type=f"{analysis_type}_company",
                        result_text=analysis_result,
                        input_data={
                            'company_id': company_data.get('id', 0),
                            'company_name': company_data.get('name', ''),
                            'analysis_timestamp': datetime.now().isoformat()
                        },
                        zodiac_signs=[],
                        news_used=True,
                        numerology_used=True,
                        astrology_api_used=True
                    )
                    saved_to_db = True
                    logger.info(f"üíæ –ê–Ω–∞–ª–∏–∑ {analysis_type} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
        
        return saved_to_qdrant, saved_to_db

    def _split_long_text(self, text: str, max_length: int = 3500) -> list:
        """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è Telegram"""
        import re
        
        if len(text) <= max_length:
            return [text]
        
        parts = []
        current_part = ""
        
        # –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º (—Å—Ç—Ä–æ–∫–∏ —Å —ç–º–æ–¥–∑–∏)
        sections = re.split(r'(\n(?=üåü|üíé|üöÄ|‚ö†Ô∏è|üìà|üîÆ|üèõÔ∏è|üíº))', text)
        
        for section in sections:
            if not section.strip():
                continue
                
            # –ï—Å–ª–∏ —Å–µ–∫—Ü–∏—è –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å
            if len(current_part + section) <= max_length:
                current_part += section
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å
                if current_part.strip():
                    parts.append(current_part.strip())
                
                # –ï—Å–ª–∏ —Å–µ–∫—Ü–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
                if len(section) > max_length:
                    sentences = section.split('. ')
                    temp_part = ""
                    
                    for sentence in sentences:
                        sentence = sentence.strip()
                        if not sentence.endswith('.') and sentence:
                            sentence += '. '
                        
                        if len(temp_part + sentence) <= max_length:
                            temp_part += sentence
                        else:
                            if temp_part.strip():
                                parts.append(temp_part.strip())
                            temp_part = sentence
                    
                    current_part = temp_part
                else:
                    current_part = section
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
        if current_part.strip():
            parts.append(current_part.strip())
        
        return parts if parts else [text]

    async def _show_next_analysis_part(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ —Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞"""
        if not update.callback_query or not update.effective_user:
            return
            
        user_id = update.effective_user.id
        user_data = context.user_data
        
        if not user_data or 'analysis_parts' not in user_data:
            await update.callback_query.edit_message_text(
                "‚ùå –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=self.keyboards.get_back_inline_button()
            )
            return
        
        current_index = user_data.get('current_part_index', 1)
        total_parts = user_data.get('total_parts', 1)
        analysis_type = user_data.get('analysis_type', 'unknown')
        parts = user_data['analysis_parts']
        
        if current_index >= total_parts or not parts:
            await update.callback_query.edit_message_text(
                "‚ùå –ë–æ–ª—å—à–µ —á–∞—Å—Ç–µ–π –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ—Ç.",
                reply_markup=self.keyboards.get_back_inline_button()
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –¥–æ —Ç–µ–∫—É—â–µ–π –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ (–Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç)
        accumulated_text = "\n\n".join(parts[:current_index])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞
        if analysis_type == 'zodiac':
            header = "<b>üîÆ –ê–ù–ê–õ–ò–ó –ó–ù–ê–ö–ê –ó–û–î–ò–ê–ö–ê –ö–û–ú–ü–ê–ù–ò–ò</b>\n\n"
        elif analysis_type == 'forecast':
            header = "<b>üìà –ë–ò–ó–ù–ï–°-–ü–†–û–ì–ù–û–ó –ö–û–ú–ü–ê–ù–ò–ò</b>\n\n"
        elif analysis_type == 'compatibility':
            header = "<b>ü§ù –ê–ù–ê–õ–ò–ó –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –ö–û–ú–ü–ê–ù–ò–ò</b>\n\n"
        else:
            header = "<b>üìä –ê–ù–ê–õ–ò–ó –ö–û–ú–ü–ê–ù–ò–ò</b>\n\n"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = []
        
        if current_index < total_parts - 1:
            # –ï—Å—Ç—å –µ—â–µ —á–∞—Å—Ç–∏
            keyboard.append([InlineKeyboardButton("üìÑ –°–ª–µ–¥—É—é—â–∞—è —á–∞—Å—Ç—å", callback_data=f"next_part_{current_index + 1}")])
        # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å - –ø—Ä–æ—Å—Ç–æ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        
        keyboard.append([InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º —Å –∫–æ–º–ø–∞–Ω–∏–µ–π", callback_data="back_to_company_actions")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        await update.callback_query.edit_message_text(
            f"{header}{accumulated_text}\n\nüìÑ –ü–æ–∫–∞–∑–∞–Ω–æ {current_index} –∏–∑ {total_parts} —á–∞—Å—Ç–µ–π",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å
        user_data['current_part_index'] = current_index + 1

    async def _handle_company_zodiac_analysis(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏"""
        if not update.callback_query or not update.effective_user:
            return
            
        user_id = update.effective_user.id
        query = update.callback_query
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ context.user_data (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ)
            company_data = None
            if context.user_data and 'selected_company' in context.user_data:
                company_data = context.user_data['selected_company']
            
            if not company_data:
                await query.edit_message_text(
                    "‚ùå –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=self.keyboards.get_back_inline_button()
                )
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
            await query.edit_message_text(
                "üîÆ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏...\n‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
                parse_mode=None
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç—Ä–µ–º –±–ª–æ–∫–∞–º —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
            news_data = ""
            if self.news_analyzer:
                try:
                    # –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
                    political_news = await self.news_analyzer.news_client.get_politics_news(limit=3)
                    politics_summary = "üèõÔ∏è –ü–û–õ–ò–¢–ò–ö–ê:\n"
                    if political_news:
                        for i, article in enumerate(political_news[:3], 1):
                            title = article.get('title', '')[:80]
                            politics_summary += f"{i}. {title}...\n"
                    
                    # –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
                    business_news = await self.news_analyzer.news_client.get_business_news(limit=3)
                    economy_summary = "\nüíº –≠–ö–û–ù–û–ú–ò–ö–ê:\n"
                    if business_news:
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –∫–∞–∫ dict —Å results
                        news_list = business_news if isinstance(business_news, list) else business_news.get('results', [])
                        for i, article in enumerate(news_list[:3], 1):
                            title = article.get('title', '')[:80]
                            economy_summary += f"{i}. {title}...\n"
                    
                    # –ù–æ–≤–æ—Å—Ç–∏ —Ñ–æ–Ω–¥–æ–≤–æ–π –±–∏—Ä–∂–∏
                    stock_news = await self.news_analyzer.news_client.get_stock_market_news(limit=3)
                    stock_summary = "\nüìà –§–û–ù–î–û–í–ê–Ø –ë–ò–†–ñ–ê:\n"
                    if stock_news:
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –∫–∞–∫ dict —Å results
                        news_list = stock_news if isinstance(stock_news, list) else stock_news.get('results', [])
                        for i, article in enumerate(news_list[:3], 1):
                            title = article.get('title', '')[:80]
                            if any(word in title.lower() for word in ['–∞–∫—Ü–∏', '–±–∏—Ä–∂–∞', '–∏–Ω–≤–µ—Å—Ç', '—Ä—ã–Ω–æ–∫']):
                                stock_summary += f"{i}. {title}...\n"
                    
                    news_data = politics_summary + economy_summary + stock_summary
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏: {e}")
            else:
                logger.warning("‚ö†Ô∏è NewsAnalyzer –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
            try:
                analysis_result = await self.astro_agent.analyze_company_zodiac(
                    company_info=company_data,
                    news_data=news_data
                )
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
                await query.edit_message_text(
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞:\n\n{str(e)}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    reply_markup=self.keyboards.get_back_inline_button()
                )
                return
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            logger.info(f"üìù –ù–ê–ß–ê–õ–û –í–ê–õ–ò–î–ê–¶–ò–ò: –ê–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤ ({len(analysis_result)} —Å–∏–º–≤–æ–ª–æ–≤)")
            logger.info(f"üìã –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤: {analysis_result[:200]}...")
            
            if self.validator:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                    from ai_astrologist.prompts import COMPANY_ZODIAC_PROMPT
                    original_prompt = COMPANY_ZODIAC_PROMPT
                    logger.info("üîç –ó–ê–ü–£–°–ö–ê–ï–ú ANTHROPIC –í–ê–õ–ò–î–ê–¶–ò–Æ...")
                    logger.info("üéØ –¶–µ–ª—å: –º–∏–Ω–∏–º—É–º 7 –±–∞–ª–ª–æ–≤ –∏–∑ 10")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                    await update.callback_query.edit_message_text(
                        "üîç **–í–ê–õ–ò–î–ê–¶–ò–Ø –ö–ê–ß–ï–°–¢–í–ê –¢–ï–ö–°–¢–ê**\n\n"
                        "ü§ñ Anthropic Claude –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç...\n"
                        "üéØ –¶–µ–ª—å: –¥–æ—Å—Ç–∏—á—å –æ—Ü–µ–Ω–∫–∏ 10/10\n"
                        "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
                        reply_markup=None,
                        parse_mode='HTML'
                    )
                    
                    # –°–æ–∑–¥–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                    async def validation_update_callback(message):
                        try:
                            if update.callback_query:
                                await update.callback_query.edit_message_text(
                                    message,
                                    parse_mode='HTML',
                                    reply_markup=None
                                )
                        except:
                            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å callback –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫
                    if hasattr(self.validator, 'claude_agent') and self.validator.claude_agent:
                        improved_text, final_score = await self.validator.claude_agent.claude_validator.iterative_refinement(
                            text=analysis_result,
                            original_prompt=original_prompt,
                            analysis_type="zodiac",
                            target_score=10.0,
                            max_iterations=7,
                            update_callback=validation_update_callback
                        )
                        validated_result = improved_text
                    else:
                        validated_result = await self.validator.validate_and_fix(analysis_result, "zodiac", original_prompt)
                    
                    logger.info("‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê: (%d —Å–∏–º–≤–æ–ª–æ–≤)", len(validated_result))
                    logger.info("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–ø–µ—Ä–≤—ã–µ 200): %s...", validated_result[:200])
                    
                    if validated_result and len(validated_result.strip()) > 100:
                        analysis_result = validated_result
                        logger.info("üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏–Ω—è—Ç")
                    else:
                        logger.warning("‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª")
                        
                except Exception as e:
                    logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
                    logger.info("üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
            else:
                logger.warning("‚ö†Ô∏è –í–∞–ª–∏–¥–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # –û—á–∏—â–∞–µ–º HTML-—Ç–µ–≥–∏
            analysis_result = self._clean_html_tags(analysis_result)
            logger.info(f"üßπ HTML –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ({len(analysis_result)} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø—É—Å—Ç–æ–π
            if not analysis_result or len(analysis_result.strip()) < 50:
                logger.error(f"‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: {len(analysis_result) if analysis_result else 0}")
                await query.edit_message_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–Ω–∞–ª–∏–∑–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–∏–ª—Å—è –ø—É—Å—Ç—ã–º.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=self.keyboards.get_back_inline_button()
                )
                return
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
            await self._auto_save_analysis(user_id, company_data, "zodiac", analysis_result)
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
            text_parts = self._split_long_text(analysis_result)
            
            if len(text_parts) == 1:
                # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                await query.edit_message_text(
                    f"<b>üîÆ –ê–ù–ê–õ–ò–ó –ó–ù–ê–ö–ê –ó–û–î–ò–ê–ö–ê –ö–û–ú–ü–ê–ù–ò–ò</b>\n\n{analysis_result}",
                    parse_mode='HTML',
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º —Å –∫–æ–º–ø–∞–Ω–∏–µ–π", callback_data="back_to_company_actions")]])
                )
            else:
                # –î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ context.user_data —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if context.user_data is not None:
                    context.user_data.update({
                        'analysis_parts': text_parts,
                        'total_parts': len(text_parts),
                        'current_part_index': 1,
                        'analysis_type': 'zodiac',
                        'last_analysis_result': analysis_result,
                        'last_analysis_type': 'zodiac'
                    })
                else:
                    logger.warning("‚ö†Ô∏è context.user_data is None, –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å
                first_part = text_parts[0]
                keyboard = []
                
                if len(text_parts) > 1:
                    keyboard.append([InlineKeyboardButton("üìÑ –°–ª–µ–¥—É—é—â–∞—è —á–∞—Å—Ç—å", callback_data="next_part_2")])
                

                keyboard.append([InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º —Å –∫–æ–º–ø–∞–Ω–∏–µ–π", callback_data="back_to_company_actions")])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    f"<b>üîÆ –ê–ù–ê–õ–ò–ó –ó–ù–ê–ö–ê –ó–û–î–ò–ê–ö–ê –ö–û–ú–ü–ê–ù–ò–ò</b>\n\n{first_part}\n\nüìÑ –ü–æ–∫–∞–∑–∞–Ω–æ 1 –∏–∑ {len(text_parts)} —á–∞—Å—Ç–µ–π",
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}",
                reply_markup=self.keyboards.get_back_inline_button()
            )

    async def _handle_company_business_forecast(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑–∞ –∫–æ–º–ø–∞–Ω–∏–∏"""
        if not update.callback_query or not update.effective_user:
            return
            
        user_id = update.effective_user.id
        query = update.callback_query
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ context.user_data (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ)
            company_data = None
            if context.user_data and 'selected_company' in context.user_data:
                company_data = context.user_data['selected_company']
            
            if not company_data:
                await query.edit_message_text(
                    "‚ùå –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=self.keyboards.get_back_inline_button()
                )
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
            await query.edit_message_text(
                "üìà –°–æ—Å—Ç–∞–≤–ª—è—é –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑ –∫–æ–º–ø–∞–Ω–∏–∏...\n‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
                parse_mode=None
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏
            news_data = ""
            try:
                if self.news_analyzer and company_data and company_data.get('business_sphere'):
                    news_analysis = await self.news_analyzer.analyze_news_for_company(
                        company_sphere=company_data.get('business_sphere', ''),
                        days_back=7
                    )
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ —Å—Ç—Ä–æ–∫—É
                    if isinstance(news_analysis, dict) and 'summary' in news_analysis:
                        news_data = str(news_analysis['summary'])
                    else:
                        news_data = str(news_analysis)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏: {e}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑
            try:
                forecast_result = await self.astro_agent.generate_business_forecast(
                    company_data=company_data,
                    astrology_data="",
                    news_data=news_data
                )
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
                await query.edit_message_text(
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑–∞:\n\n{str(e)}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    reply_markup=self.keyboards.get_back_inline_button()
                )
                return
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            if self.validator:
                try:
                    from ai_astrologist.prompts import BUSINESS_FORECAST_PROMPT
                    original_prompt = BUSINESS_FORECAST_PROMPT
                    forecast_result = await self.validator.validate_and_fix(forecast_result, "forecast", original_prompt)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–∏.")
            
            # –û—á–∏—â–∞–µ–º HTML-—Ç–µ–≥–∏
            forecast_result = self._clean_html_tags(forecast_result)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
            await self._auto_save_analysis(user_id, company_data, "forecast", forecast_result)
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
            text_parts = self._split_long_text(forecast_result)
            
            if len(text_parts) == 1:
                # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                await query.edit_message_text(
                    f"<b>üìà –ë–ò–ó–ù–ï–°-–ü–†–û–ì–ù–û–ó –ö–û–ú–ü–ê–ù–ò–ò</b>\n\n{forecast_result}",
                    parse_mode='HTML',
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º —Å –∫–æ–º–ø–∞–Ω–∏–µ–π", callback_data="back_to_company_actions")]])
                )
            else:
                # –î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ context.user_data —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if context.user_data is not None:
                    context.user_data.update({
                        'analysis_parts': text_parts,
                        'total_parts': len(text_parts),
                        'current_part_index': 1,
                        'analysis_type': 'forecast',
                        'last_analysis_result': forecast_result,
                        'last_analysis_type': 'forecast'
                    })
                else:
                    logger.warning("‚ö†Ô∏è context.user_data is None, –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å
                first_part = text_parts[0]
                keyboard = []
                
                if len(text_parts) > 1:
                    keyboard.append([InlineKeyboardButton("üìÑ –°–ª–µ–¥—É—é—â–∞—è —á–∞—Å—Ç—å", callback_data="next_part_2")])
                

                keyboard.append([InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º —Å –∫–æ–º–ø–∞–Ω–∏–µ–π", callback_data="back_to_company_actions")])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    f"<b>üìà –ë–ò–ó–ù–ï–°-–ü–†–û–ì–ù–û–ó –ö–û–ú–ü–ê–ù–ò–ò</b>\n\n{first_part}\n\nüìÑ –ü–æ–∫–∞–∑–∞–Ω–æ 1 –∏–∑ {len(text_parts)} —á–∞—Å—Ç–µ–π",
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑–∞ –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {str(e)}",
                reply_markup=self.keyboards.get_back_inline_button()
            )

    async def _handle_company_compatibility_analysis(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏"""
        if not update.callback_query or not update.effective_user:
            return
            
        user_id = update.effective_user.id
        query = update.callback_query
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ context.user_data (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ)
            company_data = None
            if context.user_data and 'selected_company' in context.user_data:
                company_data = context.user_data['selected_company']
            
            if not company_data:
                await query.edit_message_text(
                    "‚ùå –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=self.keyboards.get_back_inline_button()
                )
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
            await query.edit_message_text(
                "ü§ù –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∫–æ–º–ø–∞–Ω–∏–∏...\n‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
                parse_mode=None
            )
            
            # –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω –≤—Ç–æ—Ä–æ–π –æ–±—ä–µ–∫—Ç
            # –ü–æ–∫–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
            compatibility_result = await self.astro_agent.analyze_compatibility(
                company_data=company_data,
                object_data={"type": "general"},
                object_type="general"
            )
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            if self.validator:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                original_prompt = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∫–æ–º–ø–∞–Ω–∏–∏ —Å —É—á–µ—Ç–æ–º –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –∏ –¥–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
                compatibility_result = await self.validator.validate_and_fix(compatibility_result, "compatibility", original_prompt)
            
            # –û—á–∏—â–∞–µ–º HTML-—Ç–µ–≥–∏
            compatibility_result = self._clean_html_tags(compatibility_result)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
            await self._auto_save_analysis(user_id, company_data, "compatibility", compatibility_result)
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
            text_parts = self._split_long_text(compatibility_result)
            
            if len(text_parts) == 1:
                # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                await query.edit_message_text(
                    f"<b>ü§ù –ê–ù–ê–õ–ò–ó –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –ö–û–ú–ü–ê–ù–ò–ò</b>\n\n{compatibility_result}",
                    parse_mode='HTML',
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º —Å –∫–æ–º–ø–∞–Ω–∏–µ–π", callback_data="back_to_company_actions")]])
                )
            else:
                # –î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ context.user_data —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if context.user_data is not None:
                    context.user_data.update({
                        'analysis_parts': text_parts,
                        'total_parts': len(text_parts),
                        'current_part_index': 1,
                        'analysis_type': 'compatibility',
                        'last_analysis_result': compatibility_result,
                        'last_analysis_type': 'compatibility'
                    })
                else:
                    logger.warning("‚ö†Ô∏è context.user_data is None, –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å
                first_part = text_parts[0]
                keyboard = []
                
                if len(text_parts) > 1:
                    keyboard.append([InlineKeyboardButton("üìÑ –°–ª–µ–¥—É—é—â–∞—è —á–∞—Å—Ç—å", callback_data="next_part_2")])
                

                keyboard.append([InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º —Å –∫–æ–º–ø–∞–Ω–∏–µ–π", callback_data="back_to_company_actions")])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    f"<b>ü§ù –ê–ù–ê–õ–ò–ó –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –ö–û–ú–ü–ê–ù–ò–ò</b>\n\n{first_part}\n\nüìÑ –ü–æ–∫–∞–∑–∞–Ω–æ 1 –∏–∑ {len(text_parts)} —á–∞—Å—Ç–µ–π",
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {str(e)}",
                reply_markup=self.keyboards.get_back_inline_button()
            )



    async def _back_to_company_actions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –¥–µ–π—Å—Ç–≤–∏—è–º —Å –∫–æ–º–ø–∞–Ω–∏–µ–π"""
        if not update.callback_query or not update.effective_user:
            return
            
        user_id = update.effective_user.id
        query = update.callback_query
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ context.user_data (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ)
            company_data = None
            if context.user_data and 'selected_company' in context.user_data:
                company_data = context.user_data['selected_company']
            
            if not company_data:
                await query.edit_message_text(
                    "‚ùå –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=self.keyboards.get_back_inline_button()
                )
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–º–ø–∞–Ω–∏–µ–π
            company_name = company_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            await query.edit_message_text(
                f"üè¢ <b>{company_name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode='HTML',
                reply_markup=self.keyboards.get_company_actions_menu()
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –¥–µ–π—Å—Ç–≤–∏—è–º —Å –∫–æ–º–ø–∞–Ω–∏–µ–π: {e}")
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=self.keyboards.get_back_inline_button()
            )

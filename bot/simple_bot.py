"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
"""

import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

from bot.keyboards import BotKeyboards
from bot.states import StateManager, BotState
from ai_astrologist.numerology import NumerologyCalculator
from utils.helpers import validate_date, clean_company_name, get_zodiac_sign
from utils.logger import setup_logger
from utils.config import load_config

logger = setup_logger()


class SimpleBotHandlers:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API"""
    
    def __init__(self):
        self.state_manager = StateManager()
        self.keyboards = BotKeyboards()
        self.numerology = NumerologyCalculator()
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        if not update.effective_user or not update.message:
            return
            
        user = update.effective_user
        
        welcome_text = f"""
üîÆ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê—Å—Ç—Ä–æ–±–æ—Ç**, {user.first_name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!

–Ø ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏.

‚ú® **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ üîÆ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏
‚Ä¢ üî¢ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–∑–≤–∞–Ω–∏–π
‚Ä¢ ‚ôà –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏

**–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ!** üëá
        """
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=self.keyboards.get_main_menu(),
            parse_mode='Markdown'
        )
        
        self.state_manager.reset_user(user.id)
        logger.info(f"üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    async def message_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not update.effective_user or not update.message or not update.message.text:
            return
            
        user_id = update.effective_user.id
        text = update.message.text
        current_state = self.state_manager.get_state(user_id)
        
        logger.info(f"üí¨ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: '{text}' (—Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state.name})")
        
        if current_state == BotState.IDLE:
            if text == "üîÆ –£–∑–Ω–∞—Ç—å –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –ö–æ–º–ø–∞–Ω–∏–∏":
                await self._start_simple_analysis(update, context)
            else:
                await update.message.reply_text(
                    "ü§î –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.",
                    reply_markup=self.keyboards.get_main_menu()
                )
        
        elif current_state == BotState.ZODIAC_COMPANY_NAME:
            await self._handle_company_name(update, context, text)
        elif current_state == BotState.ZODIAC_REG_DATE:
            await self._handle_company_date(update, context, text)
        elif current_state == BotState.ZODIAC_REG_PLACE:
            await self._handle_company_place(update, context, text)
    
    async def _start_simple_analysis(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        if not update.effective_user or not update.message:
            return
        user_id = update.effective_user.id
        
        await update.message.reply_text(
            "üîÆ **–ê–ù–ê–õ–ò–ó –ó–ù–ê–ö–ê –ó–û–î–ò–ê–ö–ê –ö–û–ú–ü–ê–ù–ò–ò**\\n\\n"
            "üìù –í–≤–µ–¥–∏—Ç–µ **–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏**:",
            parse_mode='Markdown'
        )
        
        self.state_manager.set_state(user_id, BotState.ZODIAC_COMPANY_NAME)
        self.state_manager.get_user_data(user_id).reset()
    
    async def _handle_company_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏"""
        if not update.effective_user or not update.message:
            return
        user_id = update.effective_user.id
        user_data = self.state_manager.get_user_data(user_id)
        
        cleaned_name = clean_company_name(text.strip())
        if user_data:
            user_data.company_name = cleaned_name
        
        await update.message.reply_text(
            f"‚úÖ –ö–æ–º–ø–∞–Ω–∏—è: **{cleaned_name}**\\n\\n"
            "üìÖ –í–≤–µ–¥–∏—Ç–µ **–¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏** –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
            parse_mode='Markdown'
        )
        
        self.state_manager.set_state(user_id, BotState.ZODIAC_REG_DATE)
    
    async def _handle_company_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        if not update.effective_user or not update.message:
            return
        user_id = update.effective_user.id
        user_data = self.state_manager.get_user_data(user_id)
        
        reg_date = validate_date(text.strip())
        if not reg_date:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì"
            )
            return
        
        if user_data:
            user_data.registration_date = reg_date
        
        await update.message.reply_text(
            f"‚úÖ –î–∞—Ç–∞: **{reg_date.strftime('%d.%m.%Y') if reg_date else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}**\\n\\n"
            "üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ **–≥–æ—Ä–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏**:",
            parse_mode='Markdown'
        )
        
        self.state_manager.set_state(user_id, BotState.ZODIAC_REG_PLACE)
    
    async def _handle_company_place(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞"""
        if not update.effective_user or not update.message:
            return
        user_id = update.effective_user.id
        user_data = self.state_manager.get_user_data(user_id)
        
        if user_data:
            user_data.registration_place = text.strip()
        
        if not user_data or not user_data.registration_date or not user_data.company_name:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.",
                reply_markup=self.keyboards.get_main_menu()
            )
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑
        zodiac = get_zodiac_sign(user_data.registration_date)
        company_number = self.numerology.calculate_name_number(user_data.company_name)
        company_meaning = self.numerology.get_number_meaning(company_number)
        
        analysis = f"""
üè¢ **–ê–ù–ê–õ–ò–ó –ö–û–ú–ü–ê–ù–ò–ò "{user_data.company_name}"**

‚ôà **–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ:**
üåü –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: {zodiac}
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_data.registration_date.strftime('%d.%m.%Y')}
üåç –ú–µ—Å—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_data.registration_place}

üî¢ **–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:**
üéØ –ß–∏—Å–ª–æ –∫–æ–º–ø–∞–Ω–∏–∏: {company_number}
üíé –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {company_meaning['traits']}
üíº –ë–∏–∑–Ω–µ—Å-–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª: {company_meaning['business']}
‚ö†Ô∏è –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏: {company_meaning['risks']}

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
üöÄ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã —á–∏—Å–ª–∞ {company_number}
‚≠ê –£—á–∏—Ç—ã–≤–∞–π—Ç–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∑–Ω–∞–∫–∞ {zodiac}
üìä –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –≤–∞–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ü–∏–∫–ª–æ–≤

‚ú® **–≠—Ç–æ –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑.** –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å —É—á–µ—Ç–æ–º —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–ë–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑".
        """
        
        await update.message.reply_text(
            analysis,
            parse_mode='Markdown',
            reply_markup=self.keyboards.get_main_menu()
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        self.state_manager.reset_user(user_id)
        logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –¥–ª—è {user_data.company_name} –∑–∞–≤–µ—Ä—à–µ–Ω")


class SimpleAstroBot:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ê—Å—Ç—Ä–æ–±–æ—Ç–∞"""
    
    def __init__(self):
        self.config = load_config()
        self.handlers = SimpleBotHandlers()
        
        if not self.config.bot.token:
            raise ValueError("Telegram bot token is required")
        
        logger.info("ü§ñ SimpleAstroBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        app = None
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            app = Application.builder().token(self.config.bot.token).build()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            app.add_handler(CommandHandler("start", self.handlers.start_command))
            app.add_handler(MessageHandler(
                filters.TEXT & ~filters.COMMAND, 
                self.handlers.message_handler
            ))
            
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ Telegram –±–æ—Ç–∞...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
            await app.initialize()
            await app.start()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling
            if app.updater:
                await app.updater.start_polling(drop_pending_updates=True)
            
            logger.info("‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ê—Å—Ç—Ä–æ–±–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
            
            # –ñ–¥–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            try:
                await asyncio.Event().wait()
            except KeyboardInterrupt:
                logger.info("üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            raise
        finally:
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
            if app:
                if app.updater:
                    await app.updater.stop()
                await app.stop()
                await app.shutdown()
            logger.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    bot = SimpleAstroBot()
    asyncio.run(bot.start())

"""
–ú–æ–¥—É–ª—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
"""

import psutil
import os
from utils.logger import setup_logger

logger = setup_logger()


def check_single_instance() -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    
    Returns:
        bool: True –µ—Å–ª–∏ —ç—Ç–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä, False –µ—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ
    """
    try:
        current_pid = os.getpid()
        current_cmdline = ' '.join(psutil.Process(current_pid).cmdline())
        
        # –ò—â–µ–º –¥—Ä—É–≥–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Python —Å main.py
        python_processes = []
        for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
            try:
                if proc.info['name'] and 'python' in proc.info['name'].lower():
                    cmdline = ' '.join(proc.info['cmdline'] or [])
                    if 'main.py' in cmdline and proc.info['pid'] != current_pid:
                        python_processes.append(proc.info['pid'])
                        logger.warning(f"üîç –ù–∞–π–¥–µ–Ω –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞: PID {proc.info['pid']}")
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                continue
        
        if python_processes:
            logger.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(python_processes)} –¥—Ä—É–≥–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞")
            # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
            for pid in python_processes:
                try:
                    proc = psutil.Process(pid)
                    proc.terminate()
                    logger.info(f"üõë –ó–∞–≤–µ—Ä—à–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å PID {pid}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å PID {pid}: {e}")
            
            logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return True  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏: {e}")
        return True  # –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—É—Å–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
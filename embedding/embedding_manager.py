"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏ –∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
"""

from typing import List, Dict, Any, Optional
from datetime import datetime, timedelta

from .qdrant_client import QdrantClient
from utils.config import load_config
from utils.logger import setup_logger

logger = setup_logger()


class EmbeddingManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤"""
        self.config = load_config()
        self.qdrant_client = QdrantClient()
    
    async def save_user_dialog(self, user_id: int, dialog_text: str,
                              company_info: Optional[Dict] = None) -> str:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            dialog_text (str): –¢–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
            company_info (Optional[Dict]): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏
            
        Returns:
            str: ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        """
        try:
            doc_id = await self.qdrant_client.save_astro_result(
                user_id=user_id,
                company_name=company_info.get('company_name', 'Unknown') if company_info else 'Dialog',
                analysis_type='user_dialog',
                result=dialog_text
            )
            
            logger.info(f"üí¨ –î–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {doc_id}")
            return doc_id or f"dialog_{user_id}_{int(datetime.now().timestamp())}"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            raise
    
    async def save_astro_prediction(self, company_info: Dict, prediction_text: str,
                                   prediction_type: str = "general") -> str:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
        
        Args:
            company_info (Dict): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏
            prediction_text (str): –¢–µ–∫—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞
            prediction_type (str): –¢–∏–ø –ø—Ä–æ–≥–Ω–æ–∑–∞
            
        Returns:
            str: ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        """
        try:
            doc_id = await self.qdrant_client.save_astro_result(
                user_id=company_info.get('user_id', 0) if company_info else 0,
                company_name=company_info.get('company_name', 'Unknown') if company_info else 'Unknown',
                analysis_type=prediction_type,
                result=prediction_text
            )
            
            logger.info(f"üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {company_info.get('name', 'Unknown')} —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {doc_id}")
            return doc_id or f"prediction_{company_info.get('user_id', 0)}_{int(datetime.now().timestamp())}"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
            raise
    
    async def save_news_article(self, title: str, content: str, category: str,
                               source: str, url: str) -> str:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Å—Ç–∞—Ç—å–∏
        
        Args:
            title (str): –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏
            content (str): –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
            category (str): –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–æ–≤–æ—Å—Ç–∏
            source (str): –ò—Å—Ç–æ—á–Ω–∏–∫
            url (str): –°—Å—ã–ª–∫–∞
            
        Returns:
            str: ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        """
        try:
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            full_text = f"{title}\\n\\n{content}"
            
            doc_id = await self.qdrant_client.save_astro_result(
                user_id=0,  # –î–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º user_id=0
                company_name=f"News_{category}",
                analysis_type="news",
                result=full_text
            )
            
            logger.info(f"üì∞ –ù–æ–≤–æ—Å—Ç—å '{title[:50]}...' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {doc_id}")
            return doc_id or f"news_{category}_{int(datetime.now().timestamp())}"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏: {e}")
            raise
    
    async def find_similar_companies(self, company_info: Dict, 
                                   top_k: int = 3) -> List[Dict]:
        """
        –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π –≤ –±–∞–∑–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
        
        Args:
            company_info (Dict): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏
            top_k (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –ø–æ—Ö–æ–∂–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π
        """
        try:
            query = f"–ö–æ–º–ø–∞–Ω–∏—è {company_info.get('name', '')} —Å—Ñ–µ—Ä–∞ {company_info.get('sphere', '')}"
            
            results = await self.qdrant_client.search_similar_results(
                query=query
            )
            
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(results)} –ø–æ—Ö–æ–∂–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π")
            return results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π: {e}")
            return []
    
    async def get_relevant_news(self, company_sphere: str, 
                               days_back: int = 7, top_k: int = 5) -> List[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —Å—Ñ–µ—Ä—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        
        Args:
            company_sphere (str): –°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏
            days_back (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞
            top_k (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ñ–µ—Ä—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            sphere_keywords = {
                "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞": "—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ –≥–∞–∑ –Ω–µ—Ñ—Ç—å",
                "–§–∏–Ω–∞–Ω—Å—ã –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏": "–±–∞–Ω–∫–∏ —Ñ–∏–Ω–∞–Ω—Å—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ —ç–∫–æ–Ω–æ–º–∏–∫–∞",
                "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ —Ç–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏": "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ IT –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–≤—è–∑—å",
                "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å": "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ",
                "–¢–æ—Ä–≥–æ–≤–ª—è –∏ —Å—Ñ–µ—Ä–∞ —É—Å–ª—É–≥": "—Ç–æ—Ä–≥–æ–≤–ª—è —Ä–∏—Ç–µ–π–ª —É—Å–ª—É–≥–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏"
            }
            
            query = sphere_keywords.get(company_sphere, company_sphere)
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            cutoff_date = (datetime.now() - timedelta(days=days_back)).isoformat()
            
            results = await self.qdrant_client.search_similar_results(
                query=query
            )
            
            logger.info(f"üì∞ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è '{company_sphere}'")
            return results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
            return []
    
    async def get_user_history(self, user_id: int, limit: int = 10) -> List[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            limit (int): –õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            List[Dict]: –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
        """
        try:
            results = await self.qdrant_client.search_similar_results(
                query=f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"
            )
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            results.sort(key=lambda x: x["metadata"].get("timestamp", ""), reverse=True)
            
            logger.info(f"üìú –ü–æ–ª—É—á–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –∏–∑ {len(results)} –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return []
    
    async def get_database_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
        Returns:
            Dict[str, Any]: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Qdrant –≤–º–µ—Å—Ç–æ Pinecone
            formatted_stats = {
                "total_documents": 0,
                "dialogs": 0,
                "predictions": 0,
                "news": 0
            }
            
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î: {formatted_stats}")
            return formatted_stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
    
    async def cleanup_old_data(self, days_to_keep: int = 30):
        """
        –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            days_to_keep (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
        """
        try:
            # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
            # Pinecone –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä—è–º—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            logger.info(f"üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ä—à–µ {days_to_keep} –¥–Ω–µ–π (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise

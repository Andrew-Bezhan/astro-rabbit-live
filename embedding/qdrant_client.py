"""
–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Qdrant –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
–ó–∞–º–µ–Ω–∞ Pinecone —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import os
import json
from typing import List, Dict, Any, Optional
from datetime import datetime
from utils.logger import setup_logger

logger = setup_logger()

class QdrantClient:
    """–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô Qdrant –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Å–±–æ—Ä–∞ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ì–û Qdrant"""
        self.api_key = os.getenv('QDRANT_API_KEY')
        self.url = os.getenv('QDRANT_URL', 'https://67c4f754-3521-4ca2-b53a-4f44317484d7.us-east4-0.gcp.cloud.qdrant.io:6333')
        self.collection_name = "astrobot-results"
        
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ in-memory —Ä–µ–∂–∏–º–∞
        if self.url.startswith('memory://'):
            logger.info("üß† –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è in-memory –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –ë–î")
            self.client = None
            self._memory_storage = {}
            return
        
        if not self.api_key:
            logger.warning("‚ö†Ô∏è Qdrant API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω - —Å–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î")
            self.client = None
            return
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π Qdrant –∫–ª–∏–µ–Ω—Ç
            from qdrant_client import QdrantClient as QClient
            from qdrant_client.models import Distance, VectorParams, PointStruct
            
            # –£–±–∏—Ä–∞–µ–º –ø–æ—Ä—Ç –¥–ª—è cloud –≤–µ—Ä—Å–∏–∏ Qdrant
            clean_url = self.url.replace(':6333', '') if ':6333' in self.url else self.url
            
            self.client = QClient(
                url=clean_url,
                api_key=self.api_key,
                timeout=30,
                prefer_grpc=False,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTTP –¥–ª—è cloud
                check_compatibility=False  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            try:
                self.client.get_collections()
                logger.info(f"‚úÖ Qdrant –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è {clean_url}")
                # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                self._ensure_collection()
            except Exception as conn_error:
                logger.warning(f"‚ö†Ô∏è Qdrant –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è): {conn_error}")
                self.client = None
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Qdrant –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            # –ù–ï raise - —Å–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ Qdrant
            self.client = None
    
    def _ensure_collection(self):
        """–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if not self.client:
            logger.warning("‚ö†Ô∏è Qdrant –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
            return
            
        try:
            from qdrant_client.models import Distance, VectorParams
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            try:
                collections = self.client.get_collections()
                collection_exists = any(c.name == self.collection_name for c in collections.collections)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Qdrant: {e}")
                # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
                collection_exists = False
            
            if not collection_exists:
                # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
                logger.info(f"üîß –°–æ–∑–¥–∞–µ–º Qdrant –∫–æ–ª–ª–µ–∫—Ü–∏—é: {self.collection_name}")
                
                try:
                    self.client.create_collection(
                        collection_name=self.collection_name,
                        vectors_config=VectorParams(size=1536, distance=Distance.COSINE)
                    )
                    logger.info("‚úÖ Qdrant –∫–æ–ª–ª–µ–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞")
                except Exception as create_error:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é: {create_error}")
                    # –ö–æ–ª–ª–µ–∫—Ü–∏—è –º–æ–∂–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
                    pass
            
            logger.info("‚úÖ Qdrant –∫–æ–ª–ª–µ–∫—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Å–±–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Qdrant –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {e}")
            # –ù–ï raise - —Å–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
    
    async def save_astro_result(self, user_id: int, company_name: str, analysis_type: str, result: str):
        """–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∞—Å—Ç—Ä–æ–ø—Ä–æ–≥–Ω–æ–∑–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó"""
        # In-memory —Ä–µ–∂–∏–º
        if hasattr(self, '_memory_storage'):
            point_id = f"memory_{user_id}_{analysis_type}_{int(datetime.now().timestamp())}"
            self._memory_storage[point_id] = {
                'user_id': user_id,
                'company_name': company_name,
                'analysis_type': analysis_type,
                'result': result,
                'timestamp': datetime.now().isoformat()
            }
            logger.info(f"üß† –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–∞–º—è—Ç–∏: {point_id}")
            return point_id
        
        if not self.client:
            logger.warning("‚ö†Ô∏è Qdrant –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î")
            return f"local_{user_id}_{analysis_type}_{int(datetime.now().timestamp())}"
            
        try:
            # –°–æ–∑–¥–∞–µ–º embedding —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —á–µ—Ä–µ–∑ Gemini –∏–ª–∏ OpenAI
            embedding = [0.0] * 1536  # Default fallback
            
            # –ü—Ä–æ–±—É–µ–º Gemini –¥–ª—è embeddings
            gemini_key = os.getenv('GEMINI_API_KEY')
            if gemini_key:
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ö–µ—à –∫–∞–∫ –ø—Å–µ–≤–¥–æ-embedding
                    import hashlib
                    text_hash = hashlib.md5(result[:2000].encode('utf-8')).hexdigest()
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Å–µ–≤–¥–æ-–≤–µ–∫—Ç–æ—Ä
                    embedding = [float(int(text_hash[i:i+2], 16)) / 255.0 for i in range(0, min(len(text_hash), 3072), 2)]
                    embedding = (embedding * (1536 // len(embedding) + 1))[:1536]  # –î–æ–ø–æ–ª–Ω—è–µ–º –¥–æ 1536
                    logger.info("üß† Embedding —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ —Ö–µ—à-–∞–ª–≥–æ—Ä–∏—Ç–º")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è embedding: {e}")
            else:
                # Fallback OpenAI
                openai_key = os.getenv('OPENAI_API_KEY')
                if openai_key:
                    try:
                        import openai
                        openai.api_key = openai_key
                        response = openai.embeddings.create(
                            model="text-embedding-ada-002",
                            input=result[:2000]
                        )
                        embedding = response.data[0].embedding
                        logger.info("üß† Embedding —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ OpenAI")
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ OpenAI embedding: {e}")
                else:
                    logger.warning("‚ö†Ô∏è –ù–∏ Gemini, –Ω–∏ OpenAI –∫–ª—é—á–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è embeddings")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Qdrant
            from qdrant_client.models import PointStruct
            
            # –°–æ–∑–¥–∞–µ–º UUID –¥–ª—è Qdrant
            import uuid
            point_id = str(uuid.uuid4())
            
            point = PointStruct(
                id=point_id,
                vector=embedding,
                payload={
                    "user_id": user_id,
                    "company_name": company_name,
                    "analysis_type": analysis_type,
                    "result_preview": result[:500],
                    "timestamp": datetime.now().isoformat(),
                    "full_result": result
                }
            )
            
            try:
                self.client.upsert(
                    collection_name=self.collection_name,
                    points=[point]
                )
                logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Qdrant: {point_id}")
                return point_id
            except Exception as upsert_error:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Qdrant: {upsert_error}")
                return point_id  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –¥–∞–∂–µ –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
            
        except Exception as e:
            logger.error(f"‚ùå Qdrant —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó: {e}")
            return f"error_{user_id}_{analysis_type}_{int(datetime.now().timestamp())}"
    
    async def search_similar_results(self, query: str, limit: int = 5) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        # In-memory —Ä–µ–∂–∏–º
        if hasattr(self, '_memory_storage'):
            # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ –ø–∞–º—è—Ç–∏
            results = []
            query_lower = query.lower()
            
            for point_id, data in self._memory_storage.items():
                result_text = data.get('result', '').lower()
                if any(word in result_text for word in query_lower.split()):
                    results.append({
                        'id': point_id,
                        'score': 0.8,  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π score –¥–ª—è in-memory
                        'payload': data
                    })
            
            logger.info(f"üß† –ù–∞–π–¥–µ–Ω–æ –≤ –ø–∞–º—è—Ç–∏: {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return results[:limit]
        
        if not self.client:
            logger.warning("‚ö†Ô∏è Qdrant –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–∏—Å–∫ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω")
            return []
            
        try:
            # –°–æ–∑–¥–∞–µ–º embedding –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ Gemini –∏–ª–∏ OpenAI
            query_embedding = [0.0] * 1536  # Default fallback
            
            # –ü—Ä–æ–±—É–µ–º Gemini
            gemini_key = os.getenv('GEMINI_API_KEY')
            if gemini_key:
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ—à-–∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                    import hashlib
                    query_hash = hashlib.md5(query.encode('utf-8')).hexdigest()
                    query_embedding = [float(int(query_hash[i:i+2], 16)) / 255.0 for i in range(0, min(len(query_hash), 3072), 2)]
                    query_embedding = (query_embedding * (1536 // len(query_embedding) + 1))[:1536]
                    logger.info("üß† Query embedding —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ —Ö–µ—à-–∞–ª–≥–æ—Ä–∏—Ç–º")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è query embedding: {e}")
            else:
                # Fallback OpenAI
                openai_key = os.getenv('OPENAI_API_KEY')
                if openai_key:
                    try:
                        import openai
                        openai.api_key = openai_key
                        response = openai.embeddings.create(
                            model="text-embedding-ada-002",
                            input=query
                        )
                        query_embedding = response.data[0].embedding
                        logger.info("üß† Query embedding —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ OpenAI")
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ OpenAI query embedding: {e}")
                else:
                    logger.warning("‚ö†Ô∏è –ü–æ–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –±–µ–∑ API –∫–ª—é—á–µ–π")
                    return []
            
            # –ò—â–µ–º –≤ Qdrant
            search_result = self.client.search(
                collection_name=self.collection_name,
                query_vector=query_embedding,
                limit=limit,
                with_payload=True
            )
            
            return [
                {
                    'id': hit.id,
                    'score': hit.score,
                    'payload': hit.payload
                }
                for hit in search_result
            ]
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ Qdrant: {e}")
            return []

# –°–æ–∑–¥–∞–µ–º –∞–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
MandatoryQdrantClient = QdrantClient

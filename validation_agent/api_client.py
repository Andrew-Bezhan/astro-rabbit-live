"""
API –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å
"""

import aiohttp
import json
from typing import Dict, Any, Optional, List
from utils.config import load_config
from utils.logger import setup_logger

logger = setup_logger()


class ValidationAPIClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞"""
        import os
        self.config = load_config()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é OPENAI_API_KEY
        self.api_key = os.getenv('OPENAI_API_KEY') or getattr(self.config.openai, 'api_key', None)
        self.model = 'gpt-4o-mini'  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        self.api_url = 'https://api.openai.com/v1/chat/completions'
        
        if self.api_key:
            logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–π API –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            logger.warning("‚ö†Ô∏è API –∫–ª—é—á –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    async def validate_text(self, text: str, original_prompt: str) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–º–ø—Ç—É —á–µ—Ä–µ–∑ API
        
        Args:
            text (str): –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            original_prompt (str): –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        if not self.api_key:
            return {
                'is_valid': True,
                'errors': [],
                'suggestions': [],
                'confidence': 0.0
            }
        
        validation_prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –í–°–ï–ú —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ prompts.py.

–û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –ü–†–û–ú–ü–¢:
{original_prompt[:1000]}

–°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–ô –¢–ï–ö–°–¢:
{text[:2000]}

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø –î–õ–Ø –ü–†–û–í–ï–†–ö–ò:

1. –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø TELEGRAM:
   - –ù–ò–ö–û–ì–î–ê –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π HTML-—Ç–µ–≥–∏: <p>, <h1>, <h2>, <h3>, <h4>, <b>, <i>, <ul>, <li>, <hr>, <div>
   - –ù–ò–ö–û–ì–î–ê –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π Markdown: **, __, ##, ###, ---
   - –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —ç–º–æ–¥–∑–∏
   - –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ñ–æ—Ä–º–ª—è–π: "üåü –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞"
   - –°–ø–∏—Å–∫–∏ –æ—Ñ–æ—Ä–º–ª—è–π: "‚Ä¢ –ü—É–Ω–∫—Ç —Å–ø–∏—Å–∫–∞"

2. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –≠–ú–û–î–ó–ò:
   - üåü –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –≤–∞–∂–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
   - ‚≠ê –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
   - üíº –¥–ª—è –±–∏–∑–Ω–µ—Å-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
   - ‚ö° –¥–ª—è —ç–Ω–µ—Ä–≥–∏—á–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤
   - üöÄ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Ä–∞–∑–≤–∏—Ç–∏—è
   - ‚ö†Ô∏è –¥–ª—è —Ä–∏—Å–∫–æ–≤ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
   - üíé –¥–ª—è —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω
   - üîÆ –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
   - üìà –¥–ª—è —Ä–æ—Å—Ç–∞ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
   - ü§ù –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤ –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π
   - üéØ –¥–ª—è —Ü–µ–ª–µ–π –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
   - üí° –¥–ª—è –∏–Ω—Å–∞–π—Ç–æ–≤ –∏ –∏–¥–µ–π
   - üî¢ –¥–ª—è –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
   - üåç –¥–ª—è –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
   - ‚ú® –¥–ª—è –∑–∞–∫–ª—é—á–µ–Ω–∏–π –∏ –∏—Ç–æ–≥–æ–≤

3. –°–¢–†–£–ö–¢–£–†–ê –ê–ù–ê–õ–ò–ó–ê:
   - –í–≤–µ–¥–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –º–µ—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
   - –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞
   - –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏
   - –ü—Ä–æ–≥–Ω–æ–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
   - –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
   - –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

4. –°–û–î–ï–†–ñ–ê–ù–ò–ï:
   - –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç
   - –ù–ï —É–ø–æ–º–∏–Ω–∞–π –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
   - –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ

–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{{
    "is_valid": true/false,
    "errors": ["—Å–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫"],
    "suggestions": ["–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é"],
    "confidence": 0.95
}}
"""
        
        try:
            async with aiohttp.ClientSession() as session:
                headers = {
                    'Authorization': f'Bearer {self.api_key}',
                    'Content-Type': 'application/json'
                }
                
                payload = {
                    'model': self.model,
                    'messages': [
                        {'role': 'system', 'content': '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.'},
                        {'role': 'user', 'content': validation_prompt}
                    ],
                    'max_tokens': 500,
                    'temperature': 0.1
                }
                
                async with session.post(self.api_url, headers=headers, json=payload) as response:
                    if response.status == 200:
                        result = await response.json()
                        content = result['choices'][0]['message']['content']
                        
                        try:
                            validation_result = json.loads(content)
                            logger.info(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ API –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {validation_result.get('is_valid', False)}")
                            return validation_result
                        except json.JSONDecodeError:
                            logger.warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç API –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
                            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
        return {
            'is_valid': True,
            'errors': [],
            'suggestions': [],
            'confidence': 0.0
        }
    
    async def fix_text(self, text: str, errors: List[str]) -> str:
        """
        –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ API
        
        Args:
            text (str): –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            errors (List[str]): –°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫
            
        Returns:
            str: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        if not self.api_key or not errors:
            return text
        
        fix_prompt = f"""
–ò—Å–ø—Ä–∞–≤—å —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –í–°–ï–ú —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∏–∑ prompts.py:

–û–®–ò–ë–ö–ò –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
{chr(10).join(errors)}

–¢–ï–ö–°–¢ –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
{text}

–°–¢–†–û–ì–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:

1. –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø TELEGRAM:
   - –£–ë–ï–†–ò –≤—Å–µ HTML-—Ç–µ–≥–∏: <p>, <h1>, <h2>, <h3>, <h4>, <b>, <i>, <ul>, <li>, <hr>, <div>
   - –£–ë–ï–†–ò –≤–µ—Å—å Markdown: **, __, ##, ###, ---
   - –ò–°–ü–û–õ–¨–ó–£–ô —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —ç–º–æ–¥–∑–∏
   - –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¢–û–õ–¨–ö–û —Ç–∞–∫: "üåü –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞"
   - –°–ø–∏—Å–∫–∏ –¢–û–õ–¨–ö–û —Ç–∞–∫: "‚Ä¢ –ü—É–Ω–∫—Ç —Å–ø–∏—Å–∫–∞"

2. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –≠–ú–û–î–ó–ò (–∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ):
   üåü - –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –≤–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã
   üíé - —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
   üöÄ - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–∑–≤–∏—Ç–∏—è  
   ‚ö†Ô∏è - —Ä–∏—Å–∫–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
   üìà - —Ä–æ—Å—Ç –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
   üîÆ - –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
   üíº - –±–∏–∑–Ω–µ—Å-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
   üéØ - —Ü–µ–ª–∏ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
   üí° - –∏–Ω—Å–∞–π—Ç—ã –∏ –∏–¥–µ–∏
   üî¢ - –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
   üåç - –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã
   ‚ú® - –∑–∞–∫–ª—é—á–µ–Ω–∏—è –∏ –∏—Ç–æ–≥–∏

3. –°–¢–†–£–ö–¢–£–†–ê (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∏):
   - –í–≤–µ–¥–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –º–µ—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
   - –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞
   - –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏
   - –ü—Ä–æ–≥–Ω–æ–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
   - –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
   - –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

4. –ù–ï —É–ø–æ–º–∏–Ω–∞–π –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
5. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
"""
        
        try:
            async with aiohttp.ClientSession() as session:
                headers = {
                    'Authorization': f'Bearer {self.api_key}',
                    'Content-Type': 'application/json'
                }
                
                payload = {
                    'model': self.model,
                    'messages': [
                        {'role': 'system', 'content': '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ç–µ–∫—Å—Ç–∞. –í–æ–∑–≤—Ä–∞—â–∞–π —Ç–æ–ª—å–∫–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.'},
                        {'role': 'user', 'content': fix_prompt}
                    ],
                    'max_tokens': 2000,
                    'temperature': 0.1
                }
                
                async with session.post(self.api_url, headers=headers, json=payload) as response:
                    if response.status == 200:
                        result = await response.json()
                        fixed_text = result['choices'][0]['message']['content'].strip()
                        logger.info("‚úÖ –¢–µ–∫—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ API")
                        return fixed_text
                        
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ API: {e}")
        
        return text

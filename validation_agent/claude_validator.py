"""
–ê–≥–µ–Ω—Ç-–≤–∞–ª–∏–¥–∞—Ç–æ—Ä –Ω–∞ –±–∞–∑–µ Claude-3.5-Sonnet –æ—Ç Anthropic
"""

import os
import aiohttp
import json
import traceback
from typing import Dict, Any, List, Tuple
from utils.logger import setup_logger

logger = setup_logger()


class ClaudeValidatorAgent:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –Ω–∞ Claude-3.5-Sonnet"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Claude –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞"""
        self.api_key = os.getenv('ANTHROPIC_API_KEY')
        self.model = "claude-3-5-sonnet-20241022"
        self.api_url = "https://api.anthropic.com/v1/messages"
        self.max_tokens = 2000
        
        if self.api_key:
            logger.info("‚úÖ Claude –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            logger.warning("‚ö†Ô∏è ANTHROPIC_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
    
    async def validate_and_score(self, text: str, original_prompt: str, analysis_type: str = "zodiac") -> Dict[str, Any]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—Ü–µ–Ω–∫–∞ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Claude
        """
        if not self.api_key:
            return {
                'score': 5.0,
                'is_valid': False,
                'issues': ['API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'],
                'suggestions': [],
                'fixed_text': text
            }
        
        validation_prompt = f"""
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è Telegram –±–æ—Ç–æ–≤. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –ü–û–õ–ù–û–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –í–°–ï–ú –ø—Ä–∞–≤–∏–ª–∞–º –∏–∑ prompts.py –∏ –¥–∞–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –æ—Ü–µ–Ω–∫—É.

–û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –ü–†–û–ú–ü–¢:
{original_prompt}

–°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–ô –¢–ï–ö–°–¢:
{text}

–ö–†–ò–¢–ï–†–ò–ò –û–¶–ï–ù–ö–ò (–∫–∞–∂–¥—ã–π –æ—Ç 1 –¥–æ 10):

1. –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø TELEGRAM (–≤–µ—Å: 30%):
   - –°–¢–†–û–ì–û –ø—Ä–æ–≤–µ—Ä—å: –ù–ò–ö–û–ì–î–ê –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π HTML-—Ç–µ–≥–∏
   - –°–¢–†–û–ì–û –ø—Ä–æ–≤–µ—Ä—å: –ù–ò–ö–û–ì–î–ê –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π Markdown
   - –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —ç–º–æ–¥–∑–∏
   - –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ñ–æ—Ä–º–ª—è–π: "üåü –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞"
   - –°–ø–∏—Å–∫–∏: –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∏–∫–æ–Ω–∫–∏

2. –°–¢–†–£–ö–¢–£–†–ê –ê–ù–ê–õ–ò–ó–ê –ó–û–î–ò–ê–ö–ê (–≤–µ—Å: 25%):
   - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø—Ä–æ–≤–µ—Ä—å –Ω–∞–ª–∏—á–∏–µ –í–°–ï–• 6 –ë–õ–û–ö–û–í:
     üåü –ë–õ–û–ö 1 - –í–õ–ò–Ø–ù–ò–ï –ó–ù–ê–ö–ê –ó–û–î–ò–ê–ö–ê –ù–ê –°–£–î–¨–ë–£ –ö–û–ú–ü–ê–ù–ò–ò (300+ —Å–ª–æ–≤)
     üîÆ –ë–õ–û–ö 2 - –í–õ–ò–Ø–ù–ò–ï –ü–õ–ê–ù–ï–¢ –ò –ú–ï–°–¢–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò (250+ —Å–ª–æ–≤)  
     üíé –ë–õ–û–ö 3 - –°–ò–õ–¨–ù–´–ï –°–¢–û–†–û–ù–´ –ò –ü–û–¢–ï–ù–¶–ò–ê–õ –†–û–°–¢–ê (300+ —Å–ª–æ–≤)
     üßò –ë–õ–û–ö 4 - –§–ò–õ–û–°–û–§–°–ö–ê–Ø –ö–û–ù–¶–ï–ü–¶–ò–Ø –ö–û–ú–ü–ê–ù–ò–ò (250+ —Å–ª–æ–≤)
     ‚ö†Ô∏è –ë–õ–û–ö 5 - –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ï –†–ò–°–ö–ò –ò –í–´–ó–û–í–´ (200+ —Å–ª–æ–≤)
     üíº –ë–õ–û–ö 6 - –ë–ò–ó–ù–ï–°-–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ò –°–¢–†–ê–¢–ï–ì–ò–ò (200+ —Å–ª–æ–≤)
   - –ú–∏–Ω–∏–º—É–º 1500 —Å–ª–æ–≤ –æ–±—â–µ–≥–æ –æ–±—ä–µ–º–∞

3. –°–û–î–ï–†–ñ–ê–ù–ò–ï –ò –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–ò–ó–ú (–≤–µ—Å: 30%):
   - –ü–æ—ç—Ç–∏—á–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –ø—Ä–∏—Ä–æ–¥—ã –∑–Ω–∞–∫–∞
   - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø—Ä–æ—Ü–∏—Ç–∏—Ä—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   - –ü—Ä–∏–º–µ—Ä—ã 2-3 –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π —Å —Ç–µ–º –∂–µ –∑–Ω–∞–∫–æ–º
   - –ù–ï —É–ø–æ–º–∏–Ω–∞–π –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö (API, —Å–µ—Ä–≤–∏—Å—ã)

4. –Ø–ó–´–ö –ò –°–¢–ò–õ–¨ (–≤–µ—Å: 15%):
   - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, —É–≤–µ—Ä–µ–Ω–Ω—ã–π —Ç–æ–Ω
   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
   - –û—Ç —ç–∑–æ—Ç–µ—Ä–∏–∫–∏ –∫ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–µ

–í–ï–†–ù–ò –¢–û–õ–¨–ö–û –ß–ò–°–õ–û –û–¶–ï–ù–ö–ò –û–¢ 1 –î–û 10. –ù–∞–ø—Ä–∏–º–µ—Ä: 7.5
"""
        
        try:
            async with aiohttp.ClientSession() as session:
                headers = {
                    'x-api-key': self.api_key,
                    'content-type': 'application/json',
                    'anthropic-version': '2023-06-01'
                }
                
                payload = {
                    'model': self.model,
                    'max_tokens': 100,
                    'messages': [
                        {
                            'role': 'user',
                            'content': validation_prompt
                        }
                    ]
                }
                
                async with session.post(self.api_url, headers=headers, json=payload) as response:
                    if response.status == 200:
                        result = await response.json()
                        content = result['content'][0]['text'].strip()
                        
                        try:
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –æ—Ü–µ–Ω–∫–∏
                            score_text = content.replace(',', '.').strip()
                            score = float(score_text)
                            
                            logger.info("‚úÖ Claude –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ—Ü–µ–Ω–∫–∞ %.1f/10", score)
                            
                            return {
                                'score': score,
                                'is_valid': score >= 7.0,
                                'confidence': 0.9,
                                'issues': [],
                                'suggestions': []
                            }
                            
                        except Exception as e:
                            logger.warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ü–µ–Ω–∫–∏ Claude: %s", str(e))
                            logger.warning("–û—Ç–≤–µ—Ç Claude: %s", content[:200])
                    else:
                        logger.warning("‚ö†Ô∏è Claude API –æ—à–∏–±–∫–∞: %s", response.status)
                        
        except Exception as e:
            logger.warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ Claude –≤–∞–ª–∏–¥–∞—Ü–∏–∏: %s", str(e))
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
        return {
            'score': 5.0,
            'is_valid': False,
            'issues': ['–û—à–∏–±–∫–∞ API –≤–∞–ª–∏–¥–∞—Ü–∏–∏'],
            'suggestions': [],
            'confidence': 0.0
        }
    
    async def fix_text_with_claude(self, text: str, target_score: float = 10.0) -> str:
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Claude"""
        if not self.api_key:
            return text
        
        fix_prompt = f"""
–ò—Å–ø—Ä–∞–≤—å —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ {target_score}/10 —Å–æ–≥–ª–∞—Å–Ω–æ –í–°–ï–ú –ø—Ä–∞–≤–∏–ª–∞–º –∏–∑ prompts.py.

–¢–ï–ö–°–¢ –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
{text}

–°–¢–†–û–ì–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ò–ó PROMPTS.PY:

1. –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø TELEGRAM:
   - –°–¢–†–û–ì–û: –ù–ò–ö–û–ì–î–ê –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π HTML-—Ç–µ–≥–∏
   - –°–¢–†–û–ì–û: –ù–ò–ö–û–ì–î–ê –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π Markdown
   - –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —ç–º–æ–¥–∑–∏
   - –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ñ–æ—Ä–º–ª—è–π: "üåü –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞"
   - –°–ø–∏—Å–∫–∏: –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∏–∫–æ–Ω–∫–∏: ‚≠ê üéØ üí´ ‚ö° üî• üíé üöÄ ‚ö†Ô∏è üí∞

2. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï 6 –ë–õ–û–ö–û–í –ê–ù–ê–õ–ò–ó–ê –ó–û–î–ò–ê–ö–ê:
   üåü –ë–õ–û–ö 1 - –í–õ–ò–Ø–ù–ò–ï –ó–ù–ê–ö–ê –ó–û–î–ò–ê–ö–ê –ù–ê –°–£–î–¨–ë–£ –ö–û–ú–ü–ê–ù–ò–ò (300+ —Å–ª–æ–≤)
   üîÆ –ë–õ–û–ö 2 - –í–õ–ò–Ø–ù–ò–ï –ü–õ–ê–ù–ï–¢ –ò –ú–ï–°–¢–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò (250+ —Å–ª–æ–≤)
   üíé –ë–õ–û–ö 3 - –°–ò–õ–¨–ù–´–ï –°–¢–û–†–û–ù–´ –ò –ü–û–¢–ï–ù–¶–ò–ê–õ –†–û–°–¢–ê (300+ —Å–ª–æ–≤)
   üßò –ë–õ–û–ö 4 - –§–ò–õ–û–°–û–§–°–ö–ê–Ø –ö–û–ù–¶–ï–ü–¶–ò–Ø –ö–û–ú–ü–ê–ù–ò–ò (250+ —Å–ª–æ–≤)
   ‚ö†Ô∏è –ë–õ–û–ö 5 - –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ï –†–ò–°–ö–ò –ò –í–´–ó–û–í–´ (200+ —Å–ª–æ–≤)
   üíº –ë–õ–û–ö 6 - –ë–ò–ó–ù–ï–°-–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ò –°–¢–†–ê–¢–ï–ì–ò–ò (200+ —Å–ª–æ–≤)

3. –ö–ê–ß–ï–°–¢–í–û:
   - –ú–∏–Ω–∏–º—É–º 1500 —Å–ª–æ–≤ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
   - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–∫–∞–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ
   - –ü—Ä–∏–º–µ—Ä—ã 2-3 –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π —Å —Ç–µ–º –∂–µ –∑–Ω–∞–∫–æ–º

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
- –ù–ï –°–û–ö–†–ê–©–ê–ô —Ç–µ–∫—Å—Ç - —Ç–æ–ª—å–∫–æ —É–ª—É—á—à–∞–π –∏ –¥–æ–ø–æ–ª–Ω—è–π
- –°–æ–±–ª—é–¥–∞–π –í–°–ï –ø—Ä–∞–≤–∏–ª–∞ –∏–∑ prompts.py

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
"""
        
        try:
            async with aiohttp.ClientSession() as session:
                headers = {
                    'x-api-key': self.api_key,
                    'content-type': 'application/json',
                    'anthropic-version': '2023-06-01'
                }
                
                payload = {
                    'model': self.model,
                    'max_tokens': self.max_tokens,
                    'messages': [
                        {
                            'role': 'user',
                            'content': fix_prompt
                        }
                    ]
                }
                
                async with session.post(self.api_url, headers=headers, json=payload) as response:
                    if response.status == 200:
                        result = await response.json()
                        fixed_text = result['content'][0]['text'].strip()
                        logger.info("‚úÖ –¢–µ–∫—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Claude")
                        return fixed_text
                    else:
                        logger.warning("‚ö†Ô∏è Claude –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: %s", response.status)
                        
        except Exception as e:
            logger.warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Claude: %s", str(e))
        
        return text
    
    async def iterative_refinement(self, text: str, original_prompt: str, 
                                 analysis_type: str = "zodiac", 
                                 target_score: float = 10.0,
                                 max_iterations: int = 7,
                                 update_callback=None) -> Tuple[str, float]:
        """
        –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–π –æ—Ü–µ–Ω–∫–∏
        """
        current_text = text
        iteration = 0
        
        logger.info("üéØ –ù–ê–ß–ò–ù–ê–ï–ú –ò–¢–ï–†–ê–¢–ò–í–ù–û–ï –£–õ–£–ß–®–ï–ù–ò–ï –î–û –û–¶–ï–ù–ö–ò %.1f/10", target_score)
        logger.info("üìä –û–°–ù–û–í–ù–û–ô –ê–ì–ï–ù–¢ –ë–£–î–ï–¢ –°–¢–†–ï–ú–ò–¢–¨–°–Ø –ö –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ô –û–¶–ï–ù–ö–ï")
        
        while iteration < max_iterations:
            iteration += 1
            logger.info("=" * 60)
            logger.info("üîÑ –ò–¢–ï–†–ê–¶–ò–Ø –£–õ–£–ß–®–ï–ù–ò–Ø #%d –∏–∑ %d", iteration, max_iterations)
            logger.info("üéØ –¶–ï–õ–¨: –¥–æ—Å—Ç–∏—á—å –æ—Ü–µ–Ω–∫–∏ %.1f/10", target_score)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫—É –æ—Ç Claude
            validation_result = await self.validate_and_score(current_text, original_prompt, analysis_type)
            current_score = validation_result.get('score', 5.0)
            
            # –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –û–¶–ï–ù–ö–ò
            logger.info("üìä –¢–ï–ö–£–©–ê–Ø –û–¶–ï–ù–ö–ê: %.1f/10", current_score)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ—Å–ª–∏ –µ—Å—Ç—å callback
            if update_callback:
                try:
                    await update_callback(f"üîç **–í–ê–õ–ò–î–ê–¶–ò–Ø –ò–¢–ï–†–ê–¶–ò–Ø #{iteration}**\n\n"
                                        f"üìä –¢–µ–∫—É—â–∞—è –æ—Ü–µ–Ω–∫–∞: **{current_score:.1f}/10**\n"
                                        f"üéØ –¶–µ–ª—å: **{target_score:.1f}/10**\n"
                                        f"‚è≥ –£–ª—É—á—à–∞–µ–º —Ç–µ–∫—Å—Ç...")
                except:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
            
            # –ü–†–û–í–ï–†–Ø–ï–ú –î–û–°–¢–ò–ñ–ï–ù–ò–ï –¶–ï–õ–ò
            if current_score >= target_score:
                logger.info("üéâ –¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê! –û—Ü–µ–Ω–∫–∞ %.1f/10 –∑–∞ %d –∏—Ç–µ—Ä–∞—Ü–∏–π", current_score, iteration)
                logger.info("üèÜ –û–°–ù–û–í–ù–û–ô –ê–ì–ï–ù–¢ –£–°–ü–ï–®–ù–û –î–û–°–¢–ò–ì –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ì–û –ö–ê–ß–ï–°–¢–í–ê!")
                return current_text, current_score
            elif current_score >= 7.0:
                logger.info("‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –ø—Ä–æ–π–¥–µ–Ω: %.1f/10, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫ —Ü–µ–ª–∏ %.1f", current_score, target_score)
            else:
                logger.warning("‚ö†Ô∏è –û—Ü–µ–Ω–∫–∞ %.1f/10 –Ω–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞ 7.0 - –û–°–ù–û–í–ù–û–ô –ê–ì–ï–ù–¢ –î–û–õ–ñ–ï–ù –£–õ–£–ß–®–ò–¢–¨ –¢–ï–ö–°–¢", current_score)
            
            # –£–õ–£–ß–®–ê–ï–ú –¢–ï–ö–°–¢
            logger.info("üîß –û–°–ù–û–í–ù–û–ô –ê–ì–ï–ù–¢ –ü–†–ò–ú–ï–ù–Ø–ï–¢ –£–õ–£–ß–®–ï–ù–ò–Ø...")
            improved_text = await self.fix_text_with_claude(current_text, target_score)
            
            if improved_text and len(improved_text.strip()) > 100:
                if len(improved_text) < len(current_text) * 0.7:
                    logger.warning("‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–æ–∫—Ä–∞—Ç–∏–ª—Å—è —Å %d –¥–æ %d —Å–∏–º–≤–æ–ª–æ–≤ - –æ—Ç–∫–ª–æ–Ω—è–µ–º", len(current_text), len(improved_text))
                    break
                
                current_text = improved_text
                logger.info("‚úÖ –û–°–ù–û–í–ù–û–ô –ê–ì–ï–ù–¢ –£–õ–£–ß–®–ò–õ –¢–ï–ö–°–¢ (%d —Å–∏–º–≤–æ–ª–æ–≤)", len(current_text))
                logger.info("üîÑ –ü–ï–†–ï–•–û–î–ò–ú –ö –°–õ–ï–î–£–Æ–©–ï–ô –ò–¢–ï–†–ê–¶–ò–ò –î–õ–Ø –î–û–°–¢–ò–ñ–ï–ù–ò–Ø –¶–ï–õ–ò %.1f/10", target_score)
            else:
                logger.warning("‚ö†Ô∏è –û–°–ù–û–í–ù–û–ô –ê–ì–ï–ù–¢ –ù–ï –°–ú–û–ì –£–õ–£–ß–®–ò–¢–¨ –¢–ï–ö–°–¢ - –∑–∞–≤–µ—Ä—à–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏–∏")
                break
        
        logger.warning("‚ö†Ô∏è –î–û–°–¢–ò–ì–ù–£–¢–û –ú–ê–ö–°–ò–ú–£–ú –ò–¢–ï–†–ê–¶–ò–ô (%d)", max_iterations)
        logger.info("üîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê...")
        final_result = await self.validate_and_score(current_text, original_prompt, analysis_type)
        final_score = final_result.get('score', 5.0)
        
        logger.info("=" * 60)
        logger.info("üèÅ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        logger.info("üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–¶–ï–ù–ö–ê: %.1f/10", final_score)
        if final_score >= target_score:
            logger.info("üéâ –û–°–ù–û–í–ù–û–ô –ê–ì–ï–ù–¢ –î–û–°–¢–ò–ì –¶–ï–õ–ò %.1f/10!", target_score)
        elif final_score >= 7.0:
            logger.info("‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –ø—Ä–æ–π–¥–µ–Ω, –Ω–æ —Ü–µ–ª—å %.1f –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞", target_score)
        else:
            logger.warning("‚ùå –û—Ü–µ–Ω–∫–∞ %.1f –Ω–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞ 7.0", final_score)
        logger.info("=" * 60)
        
        return current_text, final_score


class AnthropicValidationAgent:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–∞ Claude"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞"""
        self.claude_validator = ClaudeValidatorAgent()
        logger.info("‚úÖ Anthropic –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def validate_and_fix(self, text: str, analysis_type: str = "zodiac", original_prompt: str = "") -> str:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        """
        try:
            # –°–¢–†–ï–ú–ò–ú–°–Ø –ö –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ô –û–¶–ï–ù–ö–ï 10 –ë–ê–õ–õ–û–í
            target_score = 10.0
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–ø—ã—Ç–æ–∫
            improved_text, final_score = await self.claude_validator.iterative_refinement(
                text=text,
                original_prompt=original_prompt,
                analysis_type=analysis_type,
                target_score=target_score,
                max_iterations=7
            )
            
            logger.info("üéØ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: %.1f/10 –¥–ª—è %s", final_score, analysis_type)
            return improved_text
            
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ Claude –≤–∞–ª–∏–¥–∞—Ü–∏–∏: %s", str(e))
            return text  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ



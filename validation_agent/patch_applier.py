"""
–°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä—Å–∫–∏—Ö –ø–∞—Ç—á–µ–π –æ—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
"""

import re
from typing import Dict, Any, List, Optional
from utils.logger import setup_logger

logger = setup_logger()


def apply_validator_patches(current_text: str, report: dict) -> str:
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø–∞—Ç—á–∏ –æ—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞:
    1) inline_fixes (find/replace)
    2) section_patches (insert/replace/append) –ø–æ exact title
    
    Args:
        current_text (str): –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        report (dict): –û—Ç—á–µ—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ —Å –ø–∞—Ç—á–∞–º–∏
        
    Returns:
        str: –¢–µ–∫—Å—Ç —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–º–∏ –ø–∞—Ç—á–∞–º–∏
    """
    text = current_text
    patches_applied = 0
    
    logger.info(f"üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á–∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –∫ —Ç–µ–∫—Å—Ç—É ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤)")

    # 1) inline fixes ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ç–æ—á–µ—á–Ω—ã–µ –∑–∞–º–µ–Ω—ã
    inline_fixes = report.get("inline_fixes", [])
    for fx in inline_fixes:
        find = (fx.get("find") or "").strip()
        repl = (fx.get("replace") or "").strip()
        if find and repl and find in text:
            text = text.replace(find, repl)
            patches_applied += 1
            logger.info(f"‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Ç–æ—á–µ—á–Ω–∞—è –∑–∞–º–µ–Ω–∞: '{find[:50]}...' ‚Üí '{repl[:50]}...'")

    # 2) section patches ‚Äî —Ä–∞–±–æ—Ç–∞ —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
    patches = report.get("section_patches", [])
    if patches:
        logger.info(f"üîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º {len(patches)} –ø–∞—Ç—á–µ–π —Ä–∞–∑–¥–µ–ª–æ–≤")
        
        def find_section(title: str):
            """–ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–æ–≥–æ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É"""
            # –∏—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–æ–≥–æ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
            pat = re.compile(rf"(?m)^\s*{re.escape(title)}\s*$")
            m = pat.search(text)
            return m.start() if m else -1

        for p in patches:
            title = (p.get("title") or "").strip()
            action = (p.get("action") or "append").strip().lower()
            content = (p.get("content") or "").strip()
            
            if not title or not content:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ç—á —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {title}")
                continue

            idx = find_section(title)
            logger.info(f"üéØ –ü–∞—Ç—á '{title}' (–¥–µ–π—Å—Ç–≤–∏–µ: {action}, –Ω–∞–π–¥–µ–Ω: {idx != -1})")
            
            if action == "insert":
                if idx == -1:
                    # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª –≤ –∫–æ–Ω–µ—Ü —Å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π –ø–µ—Ä–µ–¥ –Ω–∏–º
                    text = text.rstrip() + f"\n\n{content}\n"
                    patches_applied += 1
                    logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª: {title}")
                else:
                    # —É–∂–µ –µ—Å—Ç—å ‚Äî –∑–∞–º–µ–Ω–∏–º (—á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –ø—Ä–æ—à–ª–∏)
                    text = re.sub(rf"(?ms)^\s*{re.escape(title)}\s*$.*?(?=^\S|\Z)", content+"\n", text)
                    patches_applied += 1
                    logger.info(f"üîÑ –ó–∞–º–µ–Ω–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª: {title}")
                    
            elif action == "replace":
                if idx == -1:
                    text = text.rstrip() + f"\n\n{content}\n"
                    patches_applied += 1
                    logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω —Ä–∞–∑–¥–µ–ª (replace): {title}")
                else:
                    text = re.sub(rf"(?ms)^\s*{re.escape(title)}\s*$.*?(?=^\S|\Z)", content+"\n", text)
                    patches_applied += 1
                    logger.info(f"üîÑ –ó–∞–º–µ–Ω–µ–Ω —Ä–∞–∑–¥–µ–ª: {title}")
                    
            else:  # append
                if idx == -1:
                    text = text.rstrip() + f"\n\n{content}\n"
                    patches_applied += 1
                    logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω —Ä–∞–∑–¥–µ–ª (append): {title}")
                else:
                    # –Ω–∞–π–¥—ë–º –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ (–¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞)
                    sec_pat = re.compile(rf"(?ms)^\s*{re.escape(title)}\s*$.*?(?=^\S|\Z)")
                    m = sec_pat.search(text)
                    if m:
                        existing = m.group(0).rstrip() + "\n"
                        text = text[:m.start()] + existing + "\n" + content.strip() + "\n" + text[m.end():]
                        patches_applied += 1
                        logger.info(f"üìù –î–æ–ø–æ–ª–Ω–µ–Ω —Ä–∞–∑–¥–µ–ª: {title}")
                    else:
                        text = text.rstrip() + f"\n\n{content}\n"
                        patches_applied += 1
                        logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω —Ä–∞–∑–¥–µ–ª (append fallback): {title}")

    logger.info(f"‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –ø–∞—Ç—á–µ–π: {patches_applied}, –∏—Ç–æ–≥–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
    return text


def calculate_text_similarity(text1: str, text2: str) -> float:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤ (Jaccard –Ω–∞ —Å–ª–æ–≤–∞—Ö)
    
    Args:
        text1 (str): –ü–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç
        text2 (str): –í—Ç–æ—Ä–æ–π —Ç–µ–∫—Å—Ç
        
    Returns:
        float: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ—Ç 0.0 –¥–æ 1.0
    """
    try:
        # –ü—Ä–æ—Å—Ç–∞—è –º–µ—Ç—Ä–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–≤
        words1 = set(text1.lower().split())
        words2 = set(text2.lower().split())
        
        if not words1 and not words2:
            return 1.0
        if not words1 or not words2:
            return 0.0
            
        intersection = len(words1.intersection(words2))
        union = len(words1.union(words2))
        
        similarity = intersection / union if union > 0 else 0.0
        logger.info(f"üìä –°—Ö–æ–∂–µ—Å—Ç—å —Ç–µ–∫—Å—Ç–æ–≤: {similarity:.2f}")
        return similarity
        
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏: {e}")
        return 0.5


def determine_editing_mode(iteration: int, current_score: float, prev_score: float, similarity: float) -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    
    Args:
        iteration (int): –ù–æ–º–µ—Ä –∏—Ç–µ—Ä–∞—Ü–∏–∏
        current_score (float): –¢–µ–∫—É—â–∞—è –æ—Ü–µ–Ω–∫–∞
        prev_score (float): –ü—Ä–µ–¥—ã–¥—É—â–∞—è –æ—Ü–µ–Ω–∫–∞
        similarity (float): –°—Ö–æ–∂–µ—Å—Ç—å —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–µ–π
        
    Returns:
        str: "soft" –∏–ª–∏ "hard"
    """
    score_delta = current_score - prev_score if prev_score > 0 else 0.0
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ hard —Ä–µ–∂–∏–º –µ—Å–ª–∏:
    # - –ò—Ç–µ—Ä–∞—Ü–∏—è >= 2 –ò –ø—Ä–∏—Ä–æ—Å—Ç < 0.5
    # - –ò–õ–ò —Å—Ö–æ–∂–µ—Å—Ç—å > 0.95 (—Ç–µ–∫—Å—Ç –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)
    # - –ò–õ–ò –æ—Ü–µ–Ω–∫–∞ –∑–∞—Å—Ç—Ä—è–ª–∞ –Ω–∏–∂–µ 7.0 –Ω–∞ 3+ –∏—Ç–µ—Ä–∞—Ü–∏–∏
    
    if iteration >= 2 and score_delta < 0.5:
        logger.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ HARD —Ä–µ–∂–∏–º: –º–∞–ª—ã–π –ø—Ä–∏—Ä–æ—Å—Ç ({score_delta:.1f})")
        return "hard"
    
    if similarity > 0.95:
        logger.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ HARD —Ä–µ–∂–∏–º: —Ç–µ–∫—Å—Ç –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è ({similarity:.2f})")
        return "hard"
        
    if iteration >= 3 and current_score < 7.0:
        logger.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ HARD —Ä–µ–∂–∏–º: –∑–∞—Å—Ç—Ä—è–ª –Ω–∏–∂–µ 7.0 ({current_score:.1f})")
        return "hard"
    
    logger.info(f"üîß –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º SOFT —Ä–µ–∂–∏–º (–∏—Ç–µ—Ä–∞—Ü–∏—è {iteration}, –ø—Ä–∏—Ä–æ—Å—Ç {score_delta:.1f})")
    return "soft"


def check_score_requirements(report: dict, requirements: Optional[dict] = None) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤—Å–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º
    
    Args:
        report (dict): –û—Ç—á–µ—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
        requirements (dict): –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º
        
    Returns:
        bool: True –µ—Å–ª–∏ –≤—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
    """
    if not requirements:
        requirements = {
            "score": 7.0,
            "structure": 7.5,
            "formatting": 8.0,
            "content": 7.0,
            "language": 7.0
        }
    
    passed_metrics = []
    failed_metrics = []
    
    for metric, required_score in requirements.items():
        current_score = float(report.get(metric, 0.0))
        if current_score >= required_score:
            passed_metrics.append(f"{metric}: {current_score:.1f}>={required_score}")
        else:
            failed_metrics.append(f"{metric}: {current_score:.1f}<{required_score}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä—É—é—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    blocking_issues = report.get("blocking_issues", [])
    critical_issues = [issue for issue in blocking_issues if issue.get("severity") == "CRITICAL"]
    
    all_passed = len(failed_metrics) == 0 and len(critical_issues) == 0
    
    logger.info(f"üìä –ú–µ—Ç—Ä–∏–∫–∏: ‚úÖ{len(passed_metrics)} ‚ùå{len(failed_metrics)} üö®{len(critical_issues)}")
    if failed_metrics:
        logger.info(f"‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω—ã: {failed_metrics[:3]}")
    if critical_issues:
        logger.info(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: {[i.get('code', 'unknown') for i in critical_issues[:3]]}")
    
    return all_passed

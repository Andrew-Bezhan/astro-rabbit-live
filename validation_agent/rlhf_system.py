"""
–°–∏—Å—Ç–µ–º–∞ RLHF (Reinforcement Learning from Human Feedback) –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
"""

import asyncio
from typing import Dict, Any, List, Tuple, Optional
from utils.logger import setup_logger

logger = setup_logger()


class RLHFFeedbackSystem:
    """–°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –¥–ª—è –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
    
    def __init__(self, validator_agent):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RLHF —Å–∏—Å—Ç–µ–º—ã
        
        Args:
            validator_agent: –ê–≥–µ–Ω—Ç-–≤–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        """
        self.validator = validator_agent
        self.max_iterations = 5
        self.target_scores = {
            'zodiac': 8.5,
            'forecast': 9.0,
            'compatibility': 8.0
        }
    
    async def iterative_improvement(self, 
                                  initial_text: str, 
                                  analysis_type: str,
                                  original_prompt: str,
                                  generation_function,
                                  generation_params: Dict[str, Any]) -> Tuple[str, float, List[Dict]]:
        """
        –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
        
        Args:
            initial_text (str): –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            analysis_type (str): –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞
            original_prompt (str): –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            generation_function: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            generation_params (Dict): –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            
        Returns:
            Tuple[str, float, List[Dict]]: (–ª—É—á—à–∏–π —Ç–µ–∫—Å—Ç, —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞, –∏—Å—Ç–æ—Ä–∏—è –∏—Ç–µ—Ä–∞—Ü–∏–π)
        """
        target_score = self.target_scores.get(analysis_type, 8.5)
        current_text = initial_text
        best_text = initial_text
        best_score = 0.0
        iteration_history = []
        
        logger.info(f"üéØ –ó–∞–ø—É—Å–∫ RLHF —Å–∏—Å—Ç–µ–º—ã –¥–ª—è {analysis_type}, —Ü–µ–ª—å: {target_score}/10")
        
        for iteration in range(1, self.max_iterations + 1):
            logger.info(f"üîÑ RLHF –ò—Ç–µ—Ä–∞—Ü–∏—è #{iteration}")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫—É –æ—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
            if hasattr(self.validator, 'claude_agent') and self.validator.use_claude:
                validation_result = await self.validator.claude_agent.claude_validator.validate_and_score(
                    current_text, original_prompt, analysis_type
                )
            else:
                # –†–µ–∑–µ—Ä–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
                validation_result = await self._fallback_scoring(current_text, analysis_type)
            
            current_score = validation_result.get('score', 0.0)
            issues = validation_result.get('issues', [])
            suggestions = validation_result.get('suggestions', [])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            iteration_data = {
                'iteration': iteration,
                'score': current_score,
                'issues': issues,
                'suggestions': suggestions,
                'text_length': len(current_text)
            }
            iteration_history.append(iteration_data)
            
            logger.info(f"üìä –ò—Ç–µ—Ä–∞—Ü–∏—è {iteration}: –æ—Ü–µ–Ω–∫–∞ {current_score}/10")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if current_score > best_score:
                best_score = current_score
                best_text = current_text
                logger.info(f"üèÜ –ù–æ–≤—ã–π –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {best_score}/10")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–∏
            if current_score >= target_score:
                logger.info(f"‚úÖ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞! –û—Ü–µ–Ω–∫–∞ {current_score}/10 >= {target_score}/10")
                return current_text, current_score, iteration_history
            
            # –ï—Å–ª–∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –∏—Ç–µ—Ä–∞—Ü–∏—è, —É–ª—É—á—à–∞–µ–º —Ç–µ–∫—Å—Ç
            if iteration < self.max_iterations:
                logger.info(f"üîß –£–ª—É—á—à–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")
                
                # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
                enhanced_prompt = self._create_feedback_prompt(
                    original_prompt, 
                    current_text, 
                    issues, 
                    suggestions, 
                    target_score,
                    iteration
                )
                
                # –†–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —É—á–µ—Ç–æ–º –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
                try:
                    improved_text = await self._regenerate_with_feedback(
                        generation_function,
                        generation_params,
                        enhanced_prompt,
                        current_score,
                        target_score
                    )
                    current_text = improved_text
                    logger.info(f"üöÄ –¢–µ–∫—Å—Ç —Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å —É—á–µ—Ç–æ–º –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    if hasattr(self.validator, 'claude_agent') and self.validator.use_claude:
                        current_text = await self.validator.claude_agent.claude_validator.fix_text_with_claude(
                            current_text, issues, target_score
                        )
                    else:
                        current_text = await self._fallback_fix(current_text, issues)
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
                await asyncio.sleep(0.5)
        
        logger.warning(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º—É–º –∏—Ç–µ—Ä–∞—Ü–∏–π ({self.max_iterations})")
        logger.info(f"üèÜ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {best_score}/10")
        
        return best_text, best_score, iteration_history
    
    def _create_feedback_prompt(self, 
                              original_prompt: str, 
                              current_text: str, 
                              issues: List[str], 
                              suggestions: List[str],
                              target_score: float,
                              iteration: int) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        
        feedback_prompt = f"""
{original_prompt}

–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–ë–†–ê–¢–ù–ê–Ø –°–í–Ø–ó–¨ –û–¢ –í–ê–õ–ò–î–ê–¢–û–†–ê (–ò–¢–ï–†–ê–¶–ò–Ø {iteration}):

–ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:
{chr(10).join([f"‚ùå {issue}" for issue in issues])}

–ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ:
{chr(10).join([f"üí° {suggestion}" for suggestion in suggestions])}

–¶–ï–õ–¨: –î–æ—Å—Ç–∏—á—å –æ—Ü–µ–Ω–∫–∏ {target_score}/10

–ü–†–ï–î–´–î–£–©–ò–ô –¢–ï–ö–°–¢ (–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫):
{current_text[:500]}...

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –î–õ–Ø –£–õ–£–ß–®–ï–ù–ò–Ø:
1. –ò—Å–ø—Ä–∞–≤—å –í–°–ï —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
2. –†–µ–∞–ª–∏–∑—É–π –í–°–ï –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
3. –£–≤–µ–ª–∏—á—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é
4. –î–æ–±–∞–≤—å –±–æ–ª—å—à–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
5. –£–ª—É—á—à–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å
6. –ò—Å–ø–æ–ª—å–∑—É–π –±–æ–ª–µ–µ —è—Ä–∫–∏–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–±—Ä–∞–∑—ã

–ì–ï–ù–ï–†–ò–†–£–ô –ù–û–í–´–ô, –£–õ–£–ß–®–ï–ù–ù–´–ô –¢–ï–ö–°–¢ –° –£–ß–ï–¢–û–ú –í–°–ï–ô –û–ë–†–ê–¢–ù–û–ô –°–í–Ø–ó–ò!
"""
        return feedback_prompt
    
    async def _regenerate_with_feedback(self, 
                                      generation_function, 
                                      generation_params: Dict[str, Any],
                                      enhanced_prompt: str,
                                      current_score: float,
                                      target_score: float) -> str:
        """–†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å —É—á–µ—Ç–æ–º –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        updated_params = generation_params.copy()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ü–µ–Ω–∫–∏
        if current_score < 3.0:
            motivation = "–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–µ–∫—Å—Ç –ø–æ–ª—É—á–∏–ª –æ—á–µ–Ω—å –Ω–∏–∑–∫—É—é –æ—Ü–µ–Ω–∫—É. –°–æ–∑–¥–∞–π –ü–û–õ–ù–û–°–¢–¨–Æ –ù–û–í–´–ô, –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç!"
        elif current_score < 6.0:
            motivation = "–í–ê–ñ–ù–û: –£–ª—É—á—à–∏ –∫–∞—á–µ—Å—Ç–≤–æ —Ç–µ–∫—Å—Ç–∞, –¥–æ–±–∞–≤—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏!"
        else:
            motivation = "–ü–û–ß–¢–ò –ì–û–¢–û–í–û: –î–æ–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–æ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–∞, –∏—Å–ø—Ä–∞–≤–∏–≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ–¥–æ—á–µ—Ç—ã!"
        
        enhanced_prompt_with_motivation = f"{enhanced_prompt}\n\n{motivation}"
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–º–ø—Ç –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
        if 'prompt' in updated_params:
            updated_params['prompt'] = enhanced_prompt_with_motivation
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        improved_text = await generation_function(**updated_params)
        
        return improved_text
    
    async def _fallback_scoring(self, text: str, analysis_type: str) -> Dict[str, Any]:
        """–†–µ–∑–µ—Ä–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Claude"""
        
        # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª
        score = 5.0  # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        issues = []
        suggestions = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
        if len(text) < 500:
            score -= 2.0
            issues.append("–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
            suggestions.append("–£–≤–µ–ª–∏—á—å –æ–±—ä–µ–º —Ç–µ–∫—Å—Ç–∞ –¥–æ –º–∏–Ω–∏–º—É–º 1000 —Å–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–º–æ–¥–∑–∏
        emoji_count = len([c for c in text if ord(c) > 127])
        if emoji_count < 10:
            score -= 1.0
            issues.append("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–º–æ–¥–∑–∏")
            suggestions.append("–î–æ–±–∞–≤—å –±–æ–ª—å—à–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        if 'üåü' not in text:
            score -= 1.5
            issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏")
            suggestions.append("–î–æ–±–∞–≤—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å —ç–º–æ–¥–∑–∏ üåü")
        
        return {
            'score': max(1.0, score),
            'is_valid': score >= 7.0,
            'issues': issues,
            'suggestions': suggestions,
            'confidence': 0.7
        }
    
    async def _fallback_fix(self, text: str, issues: List[str]) -> str:
        """–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"""
        improved_text = text
        
        # –ü—Ä–æ—Å—Ç—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if "–∫–æ—Ä–æ—Ç–∫–∏–π" in str(issues):
            improved_text += "\n\nüåü –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑\n\n–î–∞–Ω–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è –æ–±–ª–∞–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –µ—ë –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–∑–≤–∏—Ç–∏—è."
        
        if "—ç–º–æ–¥–∑–∏" in str(issues):
            improved_text = "üåü " + improved_text.replace("\n", "\nüíé ", 1)
        
        return improved_text


class EnhancedValidationAgent:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å RLHF"""
    
    def __init__(self, base_validator):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        
        Args:
            base_validator: –ë–∞–∑–æ–≤—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
        """
        self.base_validator = base_validator
        self.rlhf_system = RLHFFeedbackSystem(base_validator)
        logger.info("‚úÖ RLHF –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    async def validate_and_improve_with_rlhf(self, 
                                           text: str, 
                                           analysis_type: str,
                                           original_prompt: str,
                                           generation_function=None,
                                           generation_params: Optional[Dict[str, Any]] = None) -> Tuple[str, Dict[str, Any]]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å RLHF
        
        Args:
            text (str): –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            analysis_type (str): –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞
            original_prompt (str): –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            generation_function: –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            generation_params (Dict): –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            
        Returns:
            Tuple[str, Dict]: (—É–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞)
        """
        try:
            if generation_function and generation_params:
                # –ü–æ–ª–Ω—ã–π RLHF —Ü–∏–∫–ª —Å —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
                improved_text, final_score, history = await self.rlhf_system.iterative_improvement(
                    text, analysis_type, original_prompt, generation_function, generation_params
                )
                
                metrics = {
                    'final_score': final_score,
                    'iterations_used': len(history),
                    'improvement_history': history,
                    'method': 'RLHF_full'
                }
            else:
                # –¢–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–µ–∑ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                improved_text = await self.base_validator.validate_and_fix(text, analysis_type, original_prompt)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É
                if hasattr(self.base_validator, 'claude_agent') and self.base_validator.use_claude:
                    final_validation = await self.base_validator.claude_agent.claude_validator.validate_and_score(
                        improved_text, original_prompt, analysis_type
                    )
                    final_score = final_validation.get('score', 5.0)
                else:
                    final_score = 6.0  # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
                
                metrics = {
                    'final_score': final_score,
                    'iterations_used': 1,
                    'improvement_history': [],
                    'method': 'validation_only'
                }
            
            logger.info(f"üéØ RLHF –∑–∞–≤–µ—Ä—à–µ–Ω: {final_score}/10 –∑–∞ {metrics['iterations_used']} –∏—Ç–µ—Ä–∞—Ü–∏–π")
            return improved_text, metrics
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ RLHF —Å–∏—Å—Ç–µ–º—ã: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –æ—á–∏—Å—Ç–∫—É
            cleaned_text = self.base_validator._basic_cleanup(text) if hasattr(self.base_validator, '_basic_cleanup') else text
            return cleaned_text, {'final_score': 5.0, 'method': 'fallback', 'error': str(e)}
